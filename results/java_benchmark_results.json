{
  "language" : "java",
  "timestamp" : 1.753200281677E9,
  "benchmarks" : [ {
    "name" : "complexPathNavigation",
    "description" : "Complex path navigation performance test",
    "expression" : "Patient.name.where(use = 'official').given.first()",
    "iterations" : 1000,
    "avg_time_ms" : 0.056492071000000005,
    "min_time_ms" : 0.016,
    "max_time_ms" : 7.412375,
    "ops_per_second" : 17701.59922088889
  }, {
    "name" : "functionChaining",
    "description" : "Function chaining performance test",
    "expression" : "Patient.telecom.where(system = 'phone').value.substring(0, 3)",
    "iterations" : 1000,
    "avg_time_ms" : 0.029296580000000003,
    "min_time_ms" : 0.011917,
    "max_time_ms" : 4.681167,
    "ops_per_second" : 34133.6770367053
  }, {
    "name" : "multipleConditionsFiltering",
    "description" : "Complex filtering with multiple conditions and logical operators",
    "expression" : "Patient.telecom.where(system = 'phone' and use != 'old' and rank.exists()).select(value + ' (' + use + ')')",
    "iterations" : 1000,
    "avg_time_ms" : 0.043642853,
    "min_time_ms" : 0.019958,
    "max_time_ms" : 3.94475,
    "ops_per_second" : 22913.25913088221
  }, {
    "name" : "nestedCollectionOperations",
    "description" : "Nested collection operations with type checking",
    "expression" : "Patient.name.where(use.exists()).count() + Patient.telecom.where(system.exists()).count()",
    "iterations" : 1000,
    "avg_time_ms" : 0.019298054000000002,
    "min_time_ms" : 0.014125,
    "max_time_ms" : 0.175667,
    "ops_per_second" : 51818.69633072847
  }, {
    "name" : "dateTimeComparisons",
    "description" : "Complex date/time operations and comparisons",
    "expression" : "Patient.telecom.where(period.end.exists()).count() + Patient.birthDate.toString().length()",
    "iterations" : 1000,
    "avg_time_ms" : 0.015122119,
    "min_time_ms" : 0.010166,
    "max_time_ms" : 1.230333,
    "ops_per_second" : 66128.2985539262
  }, {
    "name" : "quantityOperations",
    "description" : "Mathematical operations on quantities and numeric values",
    "expression" : "Observation.valueQuantity.value.toString().length() + Observation.code.coding.count() * 10",
    "iterations" : 1000,
    "avg_time_ms" : 0.02607843,
    "min_time_ms" : 0.010958,
    "max_time_ms" : 5.965875,
    "ops_per_second" : 38345.866679857645
  }, {
    "name" : "codingSystemFiltering",
    "description" : "Complex filtering across multiple coding systems",
    "expression" : "Observation.code.coding.where(system.contains('loinc') or system.contains('snomed')).select(code + '@' + system.split('/').last())",
    "iterations" : 1000,
    "avg_time_ms" : 0.044216492,
    "min_time_ms" : 0.026583,
    "max_time_ms" : 2.590958,
    "ops_per_second" : 22615.995859644405
  }, {
    "name" : "hierarchicalNavigation",
    "description" : "Deep hierarchical navigation with conditional logic",
    "expression" : "Questionnaire.item.item.item.where(enableWhen.exists()).select(linkId + ': ' + code.coding.where(system.contains('snomed')).display.first())",
    "iterations" : 1000,
    "avg_time_ms" : 0.019439361000000002,
    "min_time_ms" : 0.013792,
    "max_time_ms" : 0.646792,
    "ops_per_second" : 51442.02013636147
  }, {
    "name" : "recursiveItemSearch",
    "description" : "Recursive search through nested questionnaire items",
    "expression" : "Questionnaire.descendants().where(resourceType = 'item' and type = 'choice' and answerValueSet.exists()).linkId",
    "iterations" : 1000,
    "avg_time_ms" : 0.132089576,
    "min_time_ms" : 0.081417,
    "max_time_ms" : 2.315917,
    "ops_per_second" : 7570.620107070373
  }, {
    "name" : "valueSetExpansionAnalysis",
    "description" : "Complex analysis of ValueSet expansion hierarchy",
    "expression" : "ValueSet.expansion.contains.where(abstract.exists() and abstract = true).contains.where(display.contains('Mass')).count()",
    "iterations" : 1000,
    "avg_time_ms" : 0.02598076,
    "min_time_ms" : 0.013875,
    "max_time_ms" : 2.006708,
    "ops_per_second" : 38490.02107713554
  }, {
    "name" : "stringManipulationChain",
    "description" : "Complex string manipulation and pattern matching",
    "expression" : "ValueSet.expansion.contains.contains.display.where(matches('.*\\[.*\\].*')).select(substring(indexOf('['), indexOf(']') - indexOf('[') + 1))",
    "iterations" : 1000,
    "avg_time_ms" : 0.035951203,
    "min_time_ms" : 0.009917,
    "max_time_ms" : 11.548041,
    "ops_per_second" : 27815.480889471208
  }, {
    "name" : "typeConversionOperations",
    "description" : "Type checking and conversion operations",
    "expression" : "Patient.birthDate.toString().length() + Patient.active.toString().upper().length() + Patient.telecom.rank.where(convertsToInteger()).sum()",
    "iterations" : 1000,
    "avg_time_ms" : 0.023608107,
    "min_time_ms" : 0.014625,
    "max_time_ms" : 2.514583,
    "ops_per_second" : 42358.33055144997
  }, {
    "name" : "aggregationFunctions",
    "description" : "Complex aggregation and mathematical functions",
    "expression" : "Patient.name.given.count() + Patient.telecom.where(rank.exists()).rank.sum() + Patient.address.line.count()",
    "iterations" : 1000,
    "avg_time_ms" : 0.013886395999999999,
    "min_time_ms" : 0.0085,
    "max_time_ms" : 0.240291,
    "ops_per_second" : 72012.92545596424
  }, {
    "name" : "conditionalExpressions",
    "description" : "Complex conditional expressions with iif and boolean logic",
    "expression" : "iif(Observation.valueQuantity.value > 180, 'High', iif(Observation.valueQuantity.value < 150, 'Low', 'Normal')) + ' - ' + Observation.status.upper()",
    "iterations" : 1000,
    "avg_time_ms" : 0.042206545,
    "min_time_ms" : 0.015333,
    "max_time_ms" : 11.247125,
    "ops_per_second" : 23693.007802462864
  }, {
    "name" : "crossResourceReferences",
    "description" : "Complex reference handling and path resolution",
    "expression" : "Observation.subject.reference.split('/').last() + '_' + Observation.encounter.reference.split('/').last() + '_' + Observation.id",
    "iterations" : 1000,
    "avg_time_ms" : 0.019959169,
    "min_time_ms" : 0.014,
    "max_time_ms" : 0.145625,
    "ops_per_second" : 50102.286322641994
  }, {
    "name" : "errorHandlingExpressions",
    "description" : "Expressions testing error handling and edge cases",
    "expression" : "Patient.name.where(use = 'nonexistent').given.first().empty().not() or Patient.telecom.where(system = 'email').value.matches('.*@.*').allTrue()",
    "iterations" : 1000,
    "avg_time_ms" : 0.019882399,
    "min_time_ms" : 0.009625,
    "max_time_ms" : 0.215458,
    "ops_per_second" : 50295.74147465807
  } ],
  "system_info" : {
    "platform" : "Mac OS X",
    "java_version" : "22.0.1",
    "hapi_fhir_version" : "6.8.0"
  }
}