{
  "language": "clojure",
  "timestamp": "2025-07-27T07:41:27.223812Z",
  "tests": [
    {
      "name": "testDistinct1",
      "expression": "(1 | 2 | 3).isDistinct()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 23.712375,
      "error": null
    },
    {
      "name": "testDistinct2",
      "expression": "Questionnaire.descendants().linkId.isDistinct()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 3.248167,
      "error": null
    },
    {
      "name": "testDistinct3",
      "expression": "Questionnaire.descendants().linkId.select(substring(0,1)).isDistinct().not()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 4.910458,
      "error": null
    },
    {
      "name": "testDistinct4",
      "expression": "(1 | 2 | 3).distinct()",
      "result": [
        1,
        2,
        3
      ],
      "expected": [
        1,
        2,
        3
      ],
      "success": true,
      "executionTimeMs": 1.878042,
      "error": null
    },
    {
      "name": "testDistinct5",
      "expression": "Questionnaire.descendants().linkId.distinct().count()",
      "result": 10,
      "expected": [
        10
      ],
      "success": true,
      "executionTimeMs": 1.685833,
      "error": null
    },
    {
      "name": "testDistinct6",
      "expression": "Questionnaire.descendants().linkId.select(substring(0,1)).distinct().count()",
      "result": 2,
      "expected": [
        2
      ],
      "success": true,
      "executionTimeMs": 3.996708,
      "error": null
    },
    {
      "name": "testSkip1",
      "expression": "(0 | 1 | 2).skip(1) = 1 | 2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 7.38025,
      "error": null
    },
    {
      "name": "testSkip2",
      "expression": "(0 | 1 | 2).skip(2) = 2",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 3.446708,
      "error": null
    },
    {
      "name": "testSkip3",
      "expression": "Patient.name.skip(1).given.trace('test') = 'Jim' | 'Peter' | 'James'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 6.660292,
      "error": null
    },
    {
      "name": "testSkip4",
      "expression": "Patient.name.skip(3).given.exists() = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.505125,
      "error": null
    },
    {
      "name": "testSubstring1",
      "expression": "'12345'.substring(2) = '345'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.829125,
      "error": null
    },
    {
      "name": "testSubstring2",
      "expression": "'12345'.substring(2,1) = '3'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 3.12425,
      "error": null
    },
    {
      "name": "testSubstring3",
      "expression": "'12345'.substring(2,5) = '345'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.640833,
      "error": null
    },
    {
      "name": "testSubstring4",
      "expression": "'12345'.substring(25).empty()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.4685,
      "error": null
    },
    {
      "name": "testSubstring5",
      "expression": "'12345'.substring(-1).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.861833,
      "error": "class clojure.lang.PersistentVector cannot be cast to class java.lang.Number (clojure.lang.PersistentVector is in unnamed module of loader 'app'; java.lang.Number is in module java.base of loader 'bootstrap')"
    },
    {
      "name": "testSubstring7",
      "expression": "'LogicalModel-Person'.substring(0, 12)",
      "result": "LogicalModel",
      "expected": [
        "LogicalModel"
      ],
      "success": true,
      "executionTimeMs": 3.375292,
      "error": null
    },
    {
      "name": "testSubstring8",
      "expression": "'LogicalModel-Person'.substring(0, 'LogicalModel-Person'.indexOf('-'))",
      "result": "LogicalModel",
      "expected": [
        "LogicalModel"
      ],
      "success": true,
      "executionTimeMs": 2.103375,
      "error": null
    },
    {
      "name": "testSubstring9",
      "expression": "{}.substring(25).empty() = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.60875,
      "error": null
    },
    {
      "name": "testSubstring10",
      "expression": "Patient.name.family.first().substring(2, length()-5)",
      "result": null,
      "expected": [
        "alm"
      ],
      "success": false,
      "executionTimeMs": 2.4615,
      "error": "class clojure.lang.PersistentVector cannot be cast to class java.lang.Number (clojure.lang.PersistentVector is in unnamed module of loader 'app'; java.lang.Number is in module java.base of loader 'bootstrap')"
    },
    {
      "name": "testSubstring11",
      "expression": "{}.substring({}).empty() = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.353292,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-substring-fn"
    },
    {
      "name": "testSubstring12",
      "expression": "'string'.substring({}).empty() = true",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.271667,
      "error": null
    },
    {
      "name": "testBooleanLogicOr1",
      "expression": "(true or true) = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.218125,
      "error": null
    },
    {
      "name": "testBooleanLogicOr2",
      "expression": "(true or false) = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.003792,
      "error": null
    },
    {
      "name": "testBooleanLogicOr3",
      "expression": "(true or {}) = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.224667,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-or"
    },
    {
      "name": "testBooleanLogicOr4",
      "expression": "(false or true) = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 6.210333,
      "error": null
    },
    {
      "name": "testBooleanLogicOr5",
      "expression": "(false or false) = false",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.018834,
      "error": null
    },
    {
      "name": "testBooleanLogicOr6",
      "expression": "(false or {}).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.805833,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-or"
    },
    {
      "name": "testBooleanLogicOr7",
      "expression": "({} or true) = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.838708,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-or"
    },
    {
      "name": "testBooleanLogicOr8",
      "expression": "({} or false).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.430166,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-or"
    },
    {
      "name": "testBooleanLogicOr9",
      "expression": "({} or {}).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.966792,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-or"
    },
    {
      "name": "testToDecimal1",
      "expression": "'1'.toDecimal() = 1",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.104542,
      "error": null
    },
    {
      "name": "testToDecimal2",
      "expression": "'-1'.toInteger() = -1",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.079041,
      "error": null
    },
    {
      "name": "testToDecimal3",
      "expression": "'0'.toDecimal() = 0",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.971084,
      "error": null
    },
    {
      "name": "testToDecimal4",
      "expression": "'0.0'.toDecimal() = 0.0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 3.636833,
      "error": null
    },
    {
      "name": "testToDecimal5",
      "expression": "'st'.toDecimal().empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.144333,
      "error": "For input string: \"st\""
    },
    {
      "name": "testConformsTo1",
      "expression": "conformsTo('http:\/\/hl7.org\/fhir\/StructureDefinition\/Patient')",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.857916,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testConformsTo2",
      "expression": "conformsTo('http:\/\/hl7.org\/fhir\/StructureDefinition\/Person')",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 0.592708,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testConformsTo3",
      "expression": "conformsTo('http:\/\/trash')",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.568666,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testGreatorOrEqual1",
      "expression": "1 >= 2",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.654958,
      "error": null
    },
    {
      "name": "testGreatorOrEqual2",
      "expression": "1.0 >= 1.2",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.029958,
      "error": null
    },
    {
      "name": "testGreatorOrEqual3",
      "expression": "'a' >= 'b'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.774792,
      "error": null
    },
    {
      "name": "testGreatorOrEqual4",
      "expression": "'A' >= 'a'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.723375,
      "error": null
    },
    {
      "name": "testGreatorOrEqual5",
      "expression": "@2014-12-12 >= @2014-12-13",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.775333,
      "error": null
    },
    {
      "name": "testGreatorOrEqual6",
      "expression": "@2014-12-13T12:00:00 >= @2014-12-13T12:00:01",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.724875,
      "error": null
    },
    {
      "name": "testGreatorOrEqual7",
      "expression": "@T12:00:00 >= @T14:00:00",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.785125,
      "error": null
    },
    {
      "name": "testGreatorOrEqual8",
      "expression": "1 >= 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.925958,
      "error": null
    },
    {
      "name": "testGreatorOrEqual9",
      "expression": "1.0 >= 1.0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.971458,
      "error": null
    },
    {
      "name": "testGreatorOrEqual10",
      "expression": "'a' >= 'a'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.646084,
      "error": null
    },
    {
      "name": "testGreatorOrEqual11",
      "expression": "'A' >= 'A'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.583167,
      "error": null
    },
    {
      "name": "testGreatorOrEqual12",
      "expression": "@2014-12-12 >= @2014-12-12",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.605083,
      "error": null
    },
    {
      "name": "testGreatorOrEqual13",
      "expression": "@2014-12-13T12:00:00 >= @2014-12-13T12:00:00",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.607333,
      "error": null
    },
    {
      "name": "testGreatorOrEqual14",
      "expression": "@T12:00:00 >= @T12:00:00",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.696417,
      "error": null
    },
    {
      "name": "testGreatorOrEqual15",
      "expression": "2 >= 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.180291,
      "error": null
    },
    {
      "name": "testGreatorOrEqual16",
      "expression": "1.1 >= 1.0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.754792,
      "error": null
    },
    {
      "name": "testGreatorOrEqual17",
      "expression": "'b' >= 'a'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.636458,
      "error": null
    },
    {
      "name": "testGreatorOrEqual18",
      "expression": "'B' >= 'A'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.597875,
      "error": null
    },
    {
      "name": "testGreatorOrEqual19",
      "expression": "@2014-12-13 >= @2014-12-12",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.55175,
      "error": null
    },
    {
      "name": "testGreatorOrEqual20",
      "expression": "@2014-12-13T12:00:01 >= @2014-12-13T12:00:00",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.601375,
      "error": null
    },
    {
      "name": "testGreatorOrEqual21",
      "expression": "@T12:00:01 >= @T12:00:00",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.601958,
      "error": null
    },
    {
      "name": "testGreatorOrEqual22",
      "expression": "Observation.value >= 100 '[lb_av]'",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.013458,
      "error": null
    },
    {
      "name": "testGreatorOrEqual23",
      "expression": "@2018-03 >= @2018-03-01",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.655208,
      "error": null
    },
    {
      "name": "testGreatorOrEqual24",
      "expression": "@2018-03-01T10:30 >= @2018-03-01T10:30:00",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.741625,
      "error": null
    },
    {
      "name": "testGreatorOrEqual25",
      "expression": "@T10:30 >= @T10:30:00",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.667042,
      "error": null
    },
    {
      "name": "testGreatorOrEqual26",
      "expression": "@2018-03-01T10:30:00 >= @2018-03-01T10:30:00.0",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.002,
      "error": null
    },
    {
      "name": "testGreatorOrEqual27",
      "expression": "@T10:30:00 >= @T10:30:00.0",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.856958,
      "error": null
    },
    {
      "name": "testGreatorOrEqualEmpty1",
      "expression": "1 >= {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.915875,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-gte"
    },
    {
      "name": "testGreatorOrEqualEmpty2",
      "expression": "{} >= 1",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.8555,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-gte"
    },
    {
      "name": "testGreatorOrEqualEmpty3",
      "expression": "{} >= {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.800916,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-gte"
    },
    {
      "name": "testTrace1",
      "expression": "name.given.trace('test').count() = 5",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.612292,
      "error": null
    },
    {
      "name": "testTrace2",
      "expression": "name.trace('test', given).count() = 3",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.775334,
      "error": null
    },
    {
      "name": "testPlus1",
      "expression": "1 + 1 = 2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.68025,
      "error": null
    },
    {
      "name": "testPlus2",
      "expression": "1 + 0 = 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.269083,
      "error": null
    },
    {
      "name": "testPlus3",
      "expression": "1.2 + 1.8 = 3.0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.46825,
      "error": null
    },
    {
      "name": "testPlus4",
      "expression": "'a'+'b' = 'ab'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.101375,
      "error": null
    },
    {
      "name": "testPlus5",
      "expression": "'a'+{}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 1.232375,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-+"
    },
    {
      "name": "testPlusDate1",
      "expression": "@1973-12-25 + 7 days",
      "result": [],
      "expected": [
        "@1974-01-01"
      ],
      "success": true,
      "executionTimeMs": 1.767417,
      "error": null
    },
    {
      "name": "testPlusDate2",
      "expression": "@1973-12-25 + 7.7 days",
      "result": [],
      "expected": [
        "@1974-01-01"
      ],
      "success": true,
      "executionTimeMs": 1.004375,
      "error": null
    },
    {
      "name": "testPlusDate3",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 7 days",
      "result": [],
      "expected": [
        "@1974-01-01T00:00:00.000+10:00"
      ],
      "success": true,
      "executionTimeMs": 0.876792,
      "error": null
    },
    {
      "name": "testPlusDate4",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 7.7 days",
      "result": [],
      "expected": [
        "@1974-01-01T00:00:00.000+10:00"
      ],
      "success": true,
      "executionTimeMs": 0.717084,
      "error": null
    },
    {
      "name": "testPlusDate5",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 1 second",
      "result": [],
      "expected": [
        "@1973-12-25T00:00:01.000+10:00"
      ],
      "success": true,
      "executionTimeMs": 1.119833,
      "error": null
    },
    {
      "name": "testPlusDate6",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 10 millisecond",
      "result": [],
      "expected": [
        "@1973-12-25T00:00:00.010+10:00"
      ],
      "success": true,
      "executionTimeMs": 2.265458,
      "error": null
    },
    {
      "name": "testPlusDate7",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 1 minute",
      "result": [],
      "expected": [
        "@1973-12-25T00:01:00.000+10:00"
      ],
      "success": true,
      "executionTimeMs": 1.861,
      "error": null
    },
    {
      "name": "testPlusDate8",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 1 hour",
      "result": [],
      "expected": [
        "@1973-12-25T01:00:00.000+10:00"
      ],
      "success": true,
      "executionTimeMs": 0.961792,
      "error": null
    },
    {
      "name": "testPlusDate9",
      "expression": "@1973-12-25 + 1 day",
      "result": [],
      "expected": [
        "@1973-12-26"
      ],
      "success": true,
      "executionTimeMs": 1.108375,
      "error": null
    },
    {
      "name": "testPlusDate10",
      "expression": "@1973-12-25 + 1 month",
      "result": [],
      "expected": [
        "@1974-01-25"
      ],
      "success": true,
      "executionTimeMs": 0.764459,
      "error": null
    },
    {
      "name": "testPlusDate11",
      "expression": "@1973-12-25 + 1 week",
      "result": [],
      "expected": [
        "@1974-01-01"
      ],
      "success": true,
      "executionTimeMs": 0.928166,
      "error": null
    },
    {
      "name": "testPlusDate12",
      "expression": "@1973-12-25 + 1 year",
      "result": [],
      "expected": [
        "@1974-12-25"
      ],
      "success": true,
      "executionTimeMs": 0.980875,
      "error": null
    },
    {
      "name": "testPlusDate13",
      "expression": "@1973-12-25 + 1 'd'",
      "result": [],
      "expected": [
        "@1973-12-26"
      ],
      "success": true,
      "executionTimeMs": 0.884375,
      "error": null
    },
    {
      "name": "testPlusDate14",
      "expression": "@1973-12-25 + 1 'mo'",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 1.01975,
      "error": null
    },
    {
      "name": "testPlusDate15",
      "expression": "@1973-12-25 + 1 'wk'",
      "result": [],
      "expected": [
        "@1974-01-01"
      ],
      "success": true,
      "executionTimeMs": 1.621083,
      "error": null
    },
    {
      "name": "testPlusDate16",
      "expression": "@1973-12-25 + 1 'a'",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 1.371042,
      "error": null
    },
    {
      "name": "testPlusDate17",
      "expression": "@1975-12-25 + 1 'a'",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.900042,
      "error": null
    },
    {
      "name": "testPlusDate18",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 1 's'",
      "result": [],
      "expected": [
        "@1973-12-25T00:00:01.000+10:00"
      ],
      "success": true,
      "executionTimeMs": 0.805125,
      "error": null
    },
    {
      "name": "testPlusDate19",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 0.1 's'",
      "result": [],
      "expected": [
        "@1973-12-25T00:00:00.100+10:00"
      ],
      "success": true,
      "executionTimeMs": 1.165792,
      "error": null
    },
    {
      "name": "testPlusDate20",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 10 'ms'",
      "result": [],
      "expected": [
        "@1973-12-25T00:00:00.010+10:00"
      ],
      "success": true,
      "executionTimeMs": 1.958584,
      "error": null
    },
    {
      "name": "testPlusDate21",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 1 'min'",
      "result": [],
      "expected": [
        "@1973-12-25T00:01:00.000+10:00"
      ],
      "success": true,
      "executionTimeMs": 0.933417,
      "error": null
    },
    {
      "name": "testPlusDate22",
      "expression": "@1973-12-25T00:00:00.000+10:00 + 1 'h'",
      "result": [],
      "expected": [
        "@1973-12-25T01:00:00.000+10:00"
      ],
      "success": true,
      "executionTimeMs": 0.85825,
      "error": null
    },
    {
      "name": "testPlus6",
      "expression": "@1974-12-25 + 7",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 1.048042,
      "error": null
    },
    {
      "name": "testPlusTime1",
      "expression": "@T01:00:00 + 2 hours",
      "result": [],
      "expected": [
        "@T03:00:00"
      ],
      "success": true,
      "executionTimeMs": 1.195584,
      "error": null
    },
    {
      "name": "testPlusTime2",
      "expression": "@T23:00:00 + 2 hours",
      "result": [],
      "expected": [
        "@T01:00:00"
      ],
      "success": true,
      "executionTimeMs": 1.327,
      "error": null
    },
    {
      "name": "testPlusTime3",
      "expression": "@T23:00:00 + 50 hours",
      "result": [],
      "expected": [
        "@T01:00:00"
      ],
      "success": true,
      "executionTimeMs": 1.038125,
      "error": null
    },
    {
      "name": "testPlusEmpty1",
      "expression": "1 + {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 2.948208,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-+"
    },
    {
      "name": "testPlusEmpty2",
      "expression": "{} + 1",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 1.024833,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-+"
    },
    {
      "name": "testPlusEmpty3",
      "expression": "{} + {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.651,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-+"
    },
    {
      "name": "testGreaterThan1",
      "expression": "1 > 2",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.099292,
      "error": null
    },
    {
      "name": "testGreaterThan2",
      "expression": "1.0 > 1.2",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.746375,
      "error": null
    },
    {
      "name": "testGreaterThan3",
      "expression": "'a' > 'b'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.695833,
      "error": null
    },
    {
      "name": "testGreaterThan4",
      "expression": "'A' > 'a'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.547125,
      "error": null
    },
    {
      "name": "testGreaterThan5",
      "expression": "@2014-12-12 > @2014-12-13",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.710333,
      "error": null
    },
    {
      "name": "testGreaterThan6",
      "expression": "@2014-12-13T12:00:00 > @2014-12-13T12:00:01",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.63075,
      "error": null
    },
    {
      "name": "testGreaterThan7",
      "expression": "@T12:00:00 > @T14:00:00",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.634875,
      "error": null
    },
    {
      "name": "testGreaterThan8",
      "expression": "1 > 1",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.782584,
      "error": null
    },
    {
      "name": "testGreaterThan9",
      "expression": "1.0 > 1.0",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.95575,
      "error": null
    },
    {
      "name": "testGreaterThan10",
      "expression": "'a' > 'a'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.690708,
      "error": null
    },
    {
      "name": "testGreaterThan11",
      "expression": "'A' > 'A'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.5355,
      "error": null
    },
    {
      "name": "testGreaterThan12",
      "expression": "@2014-12-12 > @2014-12-12",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.648042,
      "error": null
    },
    {
      "name": "testGreaterThan13",
      "expression": "@2014-12-13T12:00:00 > @2014-12-13T12:00:00",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.178625,
      "error": null
    },
    {
      "name": "testGreaterThan14",
      "expression": "@T12:00:00 > @T12:00:00",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.715292,
      "error": null
    },
    {
      "name": "testGreaterThan15",
      "expression": "2 > 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.758625,
      "error": null
    },
    {
      "name": "testGreaterThan16",
      "expression": "1.1 > 1.0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.701542,
      "error": null
    },
    {
      "name": "testGreaterThan17",
      "expression": "'b' > 'a'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.535334,
      "error": null
    },
    {
      "name": "testGreaterThan18",
      "expression": "'B' > 'A'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.498167,
      "error": null
    },
    {
      "name": "testGreaterThan19",
      "expression": "@2014-12-13 > @2014-12-12",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.73825,
      "error": null
    },
    {
      "name": "testGreaterThan20",
      "expression": "@2014-12-13T12:00:01 > @2014-12-13T12:00:00",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.6085,
      "error": null
    },
    {
      "name": "testGreaterThan21",
      "expression": "@T12:00:01 > @T12:00:00",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.52425,
      "error": null
    },
    {
      "name": "testGreaterThan22",
      "expression": "Observation.value > 100 '[lb_av]'",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.665334,
      "error": null
    },
    {
      "name": "testGreaterThan23",
      "expression": "@2018-03 > @2018-03-01",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.500041,
      "error": null
    },
    {
      "name": "testGreaterThan24",
      "expression": "@2018-03-01T10:30 > @2018-03-01T10:30:00",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.753458,
      "error": null
    },
    {
      "name": "testGreaterThan25",
      "expression": "@T10:30 > @T10:30:00",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.589291,
      "error": null
    },
    {
      "name": "testGreaterThan26",
      "expression": "@2018-03-01T10:30:00 > @2018-03-01T10:30:00.0",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.505792,
      "error": null
    },
    {
      "name": "testGreaterThan27",
      "expression": "@T10:30:00 > @T10:30:00.0",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.478875,
      "error": null
    },
    {
      "name": "testGreaterThanEmpty1",
      "expression": "1 > {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.685417,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-gt"
    },
    {
      "name": "testGreaterThanEmpty2",
      "expression": "{} > 1",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.541791,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-gt"
    },
    {
      "name": "testGreaterThanEmpty3",
      "expression": "{} > {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.513625,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-gt"
    },
    {
      "name": "testNEquality1",
      "expression": "1 != 1",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.911541,
      "error": null
    },
    {
      "name": "testNEquality2",
      "expression": "{} != {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.580625,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-not-eq"
    },
    {
      "name": "testNEquality3",
      "expression": "1 != 2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.724875,
      "error": null
    },
    {
      "name": "testNEquality4",
      "expression": "'a' != 'a'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.542583,
      "error": null
    },
    {
      "name": "testNEquality5",
      "expression": "'a' != 'b'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.553541,
      "error": null
    },
    {
      "name": "testNEquality6",
      "expression": "1.1 != 1.1",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.790958,
      "error": null
    },
    {
      "name": "testNEquality7",
      "expression": "1.1 != 1.2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 4.650375,
      "error": null
    },
    {
      "name": "testNEquality8",
      "expression": "1.10 != 1.1",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.029209,
      "error": null
    },
    {
      "name": "testNEquality9",
      "expression": "0 != 0",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.647875,
      "error": null
    },
    {
      "name": "testNEquality10",
      "expression": "0.0 != 0",
      "result": [
        true
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.664209,
      "error": null
    },
    {
      "name": "testNEquality11",
      "expression": "@2012-04-15 != @2012-04-15",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.562583,
      "error": null
    },
    {
      "name": "testNEquality12",
      "expression": "@2012-04-15 != @2012-04-16",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.603083,
      "error": null
    },
    {
      "name": "testNEquality13",
      "expression": "@2012-04-15 != @2012-04-15T10:00:00",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.525041,
      "error": null
    },
    {
      "name": "testNEquality14",
      "expression": "@2012-04-15T15:00:00 != @2012-04-15T10:00:00",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.723292,
      "error": null
    },
    {
      "name": "testNEquality15",
      "expression": "@2012-04-15T15:30:31 != @2012-04-15T15:30:31.0",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.802334,
      "error": null
    },
    {
      "name": "testNEquality16",
      "expression": "@2012-04-15T15:30:31 != @2012-04-15T15:30:31.1",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.760792,
      "error": null
    },
    {
      "name": "testNEquality17",
      "expression": "@2012-04-15T15:00:00Z != @2012-04-15T10:00:00",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.723208,
      "error": null
    },
    {
      "name": "testNEquality18",
      "expression": "@2012-04-15T15:00:00+02:00 != @2012-04-15T16:00:00+03:00",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.575417,
      "error": null
    },
    {
      "name": "testNEquality19",
      "expression": "name != name",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.735333,
      "error": null
    },
    {
      "name": "testNEquality20",
      "expression": "name.take(2) != name.take(2).first() | name.take(2).last()",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 2.162083,
      "error": null
    },
    {
      "name": "testNEquality21",
      "expression": "name.take(2) != name.take(2).last() | name.take(2).first()",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.598166,
      "error": null
    },
    {
      "name": "testNEquality22",
      "expression": "(1.2 \/ 1.8).round(2) != 0.6666667",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.0755,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testNEquality23",
      "expression": "(1.2 \/ 1.8).round(2) != 0.67",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 0.717,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testNEquality24",
      "expression": "Observation.value != 185 'kg'",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.960625,
      "error": null
    },
    {
      "name": "testFloor1",
      "expression": "1.floor() = 1",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.775583,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testFloor2",
      "expression": "2.1.floor() = 2",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.535167,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testFloor3",
      "expression": "(-2.1).floor() = -3",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.550917,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testFloorEmpty",
      "expression": "{}.floor().empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.397917,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testTruncate1",
      "expression": "101.truncate() = 101",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.491208,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testTruncate2",
      "expression": "1.00000001.truncate() = 1",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.601209,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testTruncate3",
      "expression": "(-1.56).truncate() = -1",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.754958,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testTruncateEmpty",
      "expression": "{}.truncate().empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.411792,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testIndexOf1",
      "expression": "'LogicalModel-Person'.indexOf('-')",
      "result": 12,
      "expected": [
        12
      ],
      "success": true,
      "executionTimeMs": 0.700542,
      "error": null
    },
    {
      "name": "testIndexOf2",
      "expression": "'LogicalModel-Person'.indexOf('z')",
      "result": -1,
      "expected": [
        -1
      ],
      "success": true,
      "executionTimeMs": 0.673125,
      "error": null
    },
    {
      "name": "testIndexOf3",
      "expression": "'LogicalModel-Person'.indexOf('')",
      "result": 0,
      "expected": [
        0
      ],
      "success": true,
      "executionTimeMs": 0.566292,
      "error": null
    },
    {
      "name": "testIndexOf5",
      "expression": "'LogicalModel-Person'.indexOf({}).empty() = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.659875,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-indexOf-fn"
    },
    {
      "name": "testIndexOf4",
      "expression": "{}.indexOf('-').empty() = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.813541,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-indexOf-fn"
    },
    {
      "name": "testIndexOf6",
      "expression": "{}.indexOf({}).empty() = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.672542,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-indexOf-fn"
    },
    {
      "name": "testContainsString1",
      "expression": "'12345'.contains('6') = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 8.054916,
      "error": null
    },
    {
      "name": "testContainsString2",
      "expression": "'12345'.contains('5') = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 3.292583,
      "error": null
    },
    {
      "name": "testContainsString3",
      "expression": "'12345'.contains('45') = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.436333,
      "error": null
    },
    {
      "name": "testContainsString4",
      "expression": "'12345'.contains('35') = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.106875,
      "error": null
    },
    {
      "name": "testContainsString5",
      "expression": "'12345'.contains('12345') = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.086791,
      "error": null
    },
    {
      "name": "testContainsString6",
      "expression": "'12345'.contains('012345') = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.398458,
      "error": null
    },
    {
      "name": "testContainsString7",
      "expression": "'12345'.contains('') = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.245042,
      "error": null
    },
    {
      "name": "testContainsString8",
      "expression": "{}.contains('a').empty() = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.102,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-contains-fn"
    },
    {
      "name": "testContainsString9",
      "expression": "{}.contains('').empty() = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.835375,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-contains-fn"
    },
    {
      "name": "testContainsString10",
      "expression": "'123456789'.contains(length().toString())",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.021125,
      "error": null
    },
    {
      "name": "testContainsNonString1",
      "expression": "Appointment.identifier.contains('rand')",
      "result": null,
      "expected": [],
      "success": true,
      "executionTimeMs": 2.748709,
      "error": null
    },
    {
      "name": "testIntersect1",
      "expression": "(1 | 2 | 3).intersect(2 | 4) = 2",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.995666,
      "error": null
    },
    {
      "name": "testIntersect2",
      "expression": "(1 | 2).intersect(4).empty()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.398583,
      "error": null
    },
    {
      "name": "testIntersect3",
      "expression": "(1 | 2).intersect({}).empty()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.052208,
      "error": null
    },
    {
      "name": "testIntersect4",
      "expression": "1.combine(1).intersect(1).count() = 1",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.298166,
      "error": null
    },
    {
      "name": "testNotEquivalent1",
      "expression": "1 !~ 1",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 2.9,
      "error": "f != java.lang.Long"
    },
    {
      "name": "testNotEquivalent2",
      "expression": "{} !~ {}",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 0.918584,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-not-eq?"
    },
    {
      "name": "testNotEquivalent3",
      "expression": "{} !~ 1",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.735041,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-not-eq?"
    },
    {
      "name": "testNotEquivalent4",
      "expression": "1 !~ 2",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.837917,
      "error": "f != java.lang.Long"
    },
    {
      "name": "testNotEquivalent5",
      "expression": "'a' !~ 'a'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.724,
      "error": null
    },
    {
      "name": "testNotEquivalent6",
      "expression": "'a' !~ 'A'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.584125,
      "error": null
    },
    {
      "name": "testNotEquivalent7",
      "expression": "'a' !~ 'b'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.243916,
      "error": null
    },
    {
      "name": "testNotEquivalent8",
      "expression": "1.1 !~ 1.1",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.374792,
      "error": null
    },
    {
      "name": "testNotEquivalent9",
      "expression": "1.1 !~ 1.2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.774625,
      "error": null
    },
    {
      "name": "testNotEquivalent10",
      "expression": "1.10 !~ 1.1",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.715375,
      "error": null
    },
    {
      "name": "testNotEquivalent11",
      "expression": "0 !~ 0",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 0.865208,
      "error": "f != java.lang.Long"
    },
    {
      "name": "testNotEquivalent12",
      "expression": "0.0 !~ 0",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 0.76025,
      "error": "f != java.lang.Long"
    },
    {
      "name": "testNotEquivalent13",
      "expression": "1.2 \/ 1.8 !~ 0.6",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.320625,
      "error": null
    },
    {
      "name": "testNotEquivalent14",
      "expression": "@2012-04-15 !~ @2012-04-15",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.177125,
      "error": null
    },
    {
      "name": "testNotEquivalent15",
      "expression": "@2012-04-15 !~ @2012-04-16",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.733375,
      "error": null
    },
    {
      "name": "testNotEquivalent16",
      "expression": "@2012-04-15 !~ @2012-04-15T10:00:00",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.805125,
      "error": null
    },
    {
      "name": "testNotEquivalent17",
      "expression": "@2012-04-15T15:30:31 !~ @2012-04-15T15:30:31.0",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 2.527875,
      "error": null
    },
    {
      "name": "testNotEquivalent18",
      "expression": "@2012-04-15T15:30:31 !~ @2012-04-15T15:30:31.1",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.712333,
      "error": null
    },
    {
      "name": "testNotEquivalent19",
      "expression": "name !~ name",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.857166,
      "error": null
    },
    {
      "name": "testNotEquivalent20",
      "expression": "name.take(2).given !~ name.take(2).first().given | name.take(2).last().given",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.910291,
      "error": null
    },
    {
      "name": "testNotEquivalent21",
      "expression": "name.take(2).given !~ name.take(2).last().given | name.take(2).first().given",
      "result": [
        true
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.656125,
      "error": null
    },
    {
      "name": "testNotEquivalent22",
      "expression": "Observation.value !~ 185 'kg'",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.722,
      "error": null
    },
    {
      "name": "testComment1",
      "expression": "2 + 2 \/\/ This is a single-line comment + 4",
      "result": 4,
      "expected": [
        4
      ],
      "success": true,
      "executionTimeMs": 1.007334,
      "error": null
    },
    {
      "name": "testComment2",
      "expression": "\/\/ This is a multi line comment using \/\/ that\n  \/\/ should not fail during parsing\n  2+2",
      "result": 4,
      "expected": [
        4
      ],
      "success": true,
      "executionTimeMs": 0.801833,
      "error": null
    },
    {
      "name": "testComment3",
      "expression": "2 + 2 \n      \/*\nThis is a multi-line comment\nAny text enclosed within is ignored\n+2\n*\/",
      "result": 4,
      "expected": [
        4
      ],
      "success": true,
      "executionTimeMs": 0.960666,
      "error": null
    },
    {
      "name": "testComment4",
      "expression": "2 + 2 \n      \/*\nThis is a multi-line comment\nAny text enclosed within is ignored\n*\/\n+2",
      "result": 6,
      "expected": [
        6
      ],
      "success": true,
      "executionTimeMs": 1.002833,
      "error": null
    },
    {
      "name": "testComment5",
      "expression": "\/*\nThis is a multi-line comment\nAny text enclosed within is ignored\n*\/\n2+2",
      "result": 4,
      "expected": [
        4
      ],
      "success": true,
      "executionTimeMs": 0.719167,
      "error": null
    },
    {
      "name": "testComment6",
      "expression": "2 \/\/ comment\n\/ 2",
      "result": 1.0,
      "expected": [
        1
      ],
      "success": true,
      "executionTimeMs": 0.734833,
      "error": null
    },
    {
      "name": "testComment7",
      "expression": "2 + 2 \/",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 1.168791,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-division"
    },
    {
      "name": "testComment8",
      "expression": "2 + 2 \/* not finished",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 1.818333,
      "error": "class clojure.lang.PersistentVector cannot be cast to class java.lang.Number (clojure.lang.PersistentVector is in unnamed module of loader 'app'; java.lang.Number is in module java.base of loader 'bootstrap')"
    },
    {
      "name": "testComment9",
      "expression": "2 + \/* inline $@%^+ * *\/ 2 = 4",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.896333,
      "error": null
    },
    {
      "name": "testMod1",
      "expression": "1 mod 1 = 0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.179208,
      "error": null
    },
    {
      "name": "testMod2",
      "expression": "4 mod 2 = 0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.074583,
      "error": null
    },
    {
      "name": "testMod3",
      "expression": "5 mod 2 = 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.851542,
      "error": null
    },
    {
      "name": "testMod4",
      "expression": "2.2 mod 1.8 = 0.4",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.259834,
      "error": null
    },
    {
      "name": "testMod5",
      "expression": "5 mod 0",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 1.127667,
      "error": "Divide by zero"
    },
    {
      "name": "testModEmpty1",
      "expression": "1 mod {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 1.015917,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-mod"
    },
    {
      "name": "testModEmpty2",
      "expression": "{} mod 1",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.879416,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-mod"
    },
    {
      "name": "testModEmpty3",
      "expression": "{} mod {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.674042,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-mod"
    },
    {
      "name": "testCollectionBoolean1",
      "expression": "iif(1 | 2 | 3, true, false)",
      "result": true,
      "expected": [],
      "success": true,
      "executionTimeMs": 1.591041,
      "error": null
    },
    {
      "name": "testCollectionBoolean2",
      "expression": "iif({}, true, false)",
      "result": false,
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.34425,
      "error": null
    },
    {
      "name": "testCollectionBoolean3",
      "expression": "iif(true, true, false)",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.402833,
      "error": null
    },
    {
      "name": "testCollectionBoolean4",
      "expression": "iif({} | true, true, false)",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 2.407958,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-union"
    },
    {
      "name": "testCollectionBoolean5",
      "expression": "iif(true, true, 1\/0)",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 3.283625,
      "error": null
    },
    {
      "name": "testCollectionBoolean6",
      "expression": "iif(false, 1\/0, true)",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.575625,
      "error": null
    },
    {
      "name": "testMinus1",
      "expression": "1 - 1 = 0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.24175,
      "error": null
    },
    {
      "name": "testMinus2",
      "expression": "1 - 0 = 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.203708,
      "error": null
    },
    {
      "name": "testMinus3",
      "expression": "1.8 - 1.2 = 0.6",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.264,
      "error": null
    },
    {
      "name": "testMinus4",
      "expression": "'a'-'b' = 'ab'",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 2.490959,
      "error": "\"a\"  clojure.core$_@71370fec \"b\" type missmatch"
    },
    {
      "name": "testMinus5",
      "expression": "@1974-12-25 - 1 'month'",
      "result": [],
      "expected": [
        "@1974-11-25"
      ],
      "success": true,
      "executionTimeMs": 1.809709,
      "error": null
    },
    {
      "name": "testMinus6",
      "expression": "@1974-12-25 - 1 'cm'",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 1.895375,
      "error": null
    },
    {
      "name": "testMinus7",
      "expression": "@T00:30:00 - 1 hour",
      "result": [],
      "expected": [
        "@T23:30:00"
      ],
      "success": true,
      "executionTimeMs": 0.8465,
      "error": null
    },
    {
      "name": "testMinus8",
      "expression": "@T01:00:00 - 2 hours",
      "result": [],
      "expected": [
        "@T23:00:00"
      ],
      "success": true,
      "executionTimeMs": 0.739375,
      "error": null
    },
    {
      "name": "testMinusEmpty1",
      "expression": "1 - {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.8595,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp--"
    },
    {
      "name": "testMinusEmpty2",
      "expression": "{} - 1",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.664334,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp--"
    },
    {
      "name": "testMinusEmpty3",
      "expression": "{} - {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.525291,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp--"
    },
    {
      "name": "testPower1",
      "expression": "2.power(3) = 8",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.748792,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testPower2",
      "expression": "2.5.power(2) = 6.25",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.610041,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testPower3",
      "expression": "(-1).power(0.5)",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.690625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testPowerEmpty",
      "expression": "{}.power(2).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.726875,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testPowerEmpty2",
      "expression": "{}.power({}).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.943542,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testPowerEmpty3",
      "expression": "2.5.power({}).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.800416,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "from-zulip-1",
      "expression": "(true and 'foo').empty()",
      "result": false,
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.691667,
      "error": null
    },
    {
      "name": "from-zulip-2",
      "expression": "(true | 'foo').allTrue()",
      "result": false,
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.071709,
      "error": null
    },
    {
      "name": "testStringYearConvertsToDate",
      "expression": "'2015'.convertsToDate()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 7.921625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringMonthConvertsToDate",
      "expression": "'2015-02'.convertsToDate()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.398542,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringDayConvertsToDate",
      "expression": "'2015-02-04'.convertsToDate()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.122375,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringYearConvertsToDateTime",
      "expression": "'2015'.convertsToDateTime()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.42875,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringMonthConvertsToDateTime",
      "expression": "'2015-02'.convertsToDateTime()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 2.207959,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringDayConvertsToDateTime",
      "expression": "'2015-02-04'.convertsToDateTime()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.931416,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringHourConvertsToDateTime",
      "expression": "'2015-02-04T14'.convertsToDateTime()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.610959,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringMinuteConvertsToDateTime",
      "expression": "'2015-02-04T14:34'.convertsToDateTime()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.345625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringSecondConvertsToDateTime",
      "expression": "'2015-02-04T14:34:28'.convertsToDateTime()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.325833,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringMillisecondConvertsToDateTime",
      "expression": "'2015-02-04T14:34:28.123'.convertsToDateTime()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.319458,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringUTCConvertsToDateTime",
      "expression": "'2015-02-04T14:34:28Z'.convertsToDateTime()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.333417,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringTZConvertsToDateTime",
      "expression": "'2015-02-04T14:34:28+10:00'.convertsToDateTime()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.446541,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringHourConvertsToTime",
      "expression": "'14'.convertsToTime()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.372959,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringMinuteConvertsToTime",
      "expression": "'14:34'.convertsToTime()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.404875,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringSecondConvertsToTime",
      "expression": "'14:34:28'.convertsToTime()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.320208,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringMillisecondConvertsToTime",
      "expression": "'14:34:28.123'.convertsToTime()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.418709,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testIntegerLiteralConvertsToInteger",
      "expression": "1.convertsToInteger()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.655709,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testIntegerLiteralIsInteger",
      "expression": "1.is(Integer)",
      "result": [
        "is",
        [
          1,
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.255459,
      "error": null
    },
    {
      "name": "testIntegerLiteralIsSystemInteger",
      "expression": "1.is(System.Integer)",
      "result": [
        "is",
        [
          1,
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.826,
      "error": null
    },
    {
      "name": "testStringLiteralConvertsToInteger",
      "expression": "'1'.convertsToInteger()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.659792,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringLiteralConvertsToIntegerFalse",
      "expression": "'a'.convertsToInteger().not()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.416625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringDecimalConvertsToIntegerFalse",
      "expression": "'1.0'.convertsToInteger().not()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.3745,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringLiteralIsNotInteger",
      "expression": "'1'.is(Integer).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.759666,
      "error": null
    },
    {
      "name": "testBooleanLiteralConvertsToInteger",
      "expression": "true.convertsToInteger()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.339167,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testBooleanLiteralIsNotInteger",
      "expression": "true.is(Integer).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.628416,
      "error": null
    },
    {
      "name": "testDateIsNotInteger",
      "expression": "@2013-04-05.is(Integer).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.923292,
      "error": null
    },
    {
      "name": "testIntegerLiteralToInteger",
      "expression": "1.toInteger() = 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.988958,
      "error": null
    },
    {
      "name": "testStringIntegerLiteralToInteger",
      "expression": "'1'.toInteger() = 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.78275,
      "error": null
    },
    {
      "name": "testDecimalLiteralToInteger",
      "expression": "'1.1'.toInteger() = {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.586125,
      "error": "For input string: \"1.1\""
    },
    {
      "name": "testDecimalLiteralToIntegerIsEmpty",
      "expression": "'1.1'.toInteger().empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.533875,
      "error": "For input string: \"1.1\""
    },
    {
      "name": "testBooleanLiteralToInteger",
      "expression": "true.toInteger() = 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.664959,
      "error": null
    },
    {
      "name": "testIntegerLiteralConvertsToDecimal",
      "expression": "1.convertsToDecimal()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.528208,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testIntegerLiteralIsNotDecimal",
      "expression": "1.is(Decimal).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.928625,
      "error": null
    },
    {
      "name": "testDecimalLiteralConvertsToDecimal",
      "expression": "1.0.convertsToDecimal()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.673791,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testDecimalLiteralIsDecimal",
      "expression": "1.0.is(Decimal)",
      "result": [
        "is",
        [
          1.0,
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.633625,
      "error": null
    },
    {
      "name": "testStringIntegerLiteralConvertsToDecimal",
      "expression": "'1'.convertsToDecimal()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.590042,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringIntegerLiteralIsNotDecimal",
      "expression": "'1'.is(Decimal).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.774875,
      "error": null
    },
    {
      "name": "testStringLiteralConvertsToDecimalFalse",
      "expression": "'1.a'.convertsToDecimal().not()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.443458,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringDecimalLiteralConvertsToDecimal",
      "expression": "'1.0'.convertsToDecimal()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.347042,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringDecimalLiteralIsNotDecimal",
      "expression": "'1.0'.is(Decimal).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.006167,
      "error": null
    },
    {
      "name": "testBooleanLiteralConvertsToDecimal",
      "expression": "true.convertsToDecimal()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.511666,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testBooleanLiteralIsNotDecimal",
      "expression": "true.is(Decimal).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.17275,
      "error": null
    },
    {
      "name": "testIntegerLiteralToDecimal",
      "expression": "1.toDecimal() = 1.0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.255583,
      "error": null
    },
    {
      "name": "testIntegerLiteralToDeciamlEquivalent",
      "expression": "1.toDecimal() ~ 1.0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.657916,
      "error": null
    },
    {
      "name": "testDecimalLiteralToDecimal",
      "expression": "1.0.toDecimal() = 1.0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.662833,
      "error": null
    },
    {
      "name": "testDecimalLiteralToDecimalEqual",
      "expression": "'1.1'.toDecimal() = 1.1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.288875,
      "error": null
    },
    {
      "name": "testBooleanLiteralToDecimal",
      "expression": "true.toDecimal() = 1",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.810417,
      "error": null
    },
    {
      "name": "testIntegerLiteralConvertsToQuantity",
      "expression": "1.convertsToQuantity()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.490666,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testIntegerLiteralIsNotQuantity",
      "expression": "1.is(Quantity).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.794542,
      "error": null
    },
    {
      "name": "testDecimalLiteralConvertsToQuantity",
      "expression": "1.0.convertsToQuantity()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.881333,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testDecimalLiteralIsNotQuantity",
      "expression": "1.0.is(System.Quantity).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.604541,
      "error": null
    },
    {
      "name": "testStringIntegerLiteralConvertsToQuantity",
      "expression": "'1'.convertsToQuantity()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.544458,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringIntegerLiteralIsNotQuantity",
      "expression": "'1'.is(System.Quantity).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.962417,
      "error": null
    },
    {
      "name": "testStringQuantityLiteralConvertsToQuantity",
      "expression": "'1 day'.convertsToQuantity()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.802,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringQuantityWeekConvertsToQuantity",
      "expression": "'1 \\'wk\\''.convertsToQuantity()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.873292,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringQuantityWeekConvertsToQuantityFalse",
      "expression": "'1 wk'.convertsToQuantity().not()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.675917,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringDecimalLiteralConvertsToQuantityFalse",
      "expression": "'1.a'.convertsToQuantity().not()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.766625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringDecimalLiteralConvertsToQuantity",
      "expression": "'1.0'.convertsToQuantity()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.548917,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringDecimalLiteralIsNotSystemQuantity",
      "expression": "'1.0'.is(System.Quantity).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.1215,
      "error": null
    },
    {
      "name": "testBooleanLiteralConvertsToQuantity",
      "expression": "true.convertsToQuantity()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.427084,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testBooleanLiteralIsNotSystemQuantity",
      "expression": "true.is(System.Quantity).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.736375,
      "error": null
    },
    {
      "name": "testIntegerLiteralToQuantity",
      "expression": "1.toQuantity() = 1 '1'",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.918542,
      "error": null
    },
    {
      "name": "testDecimalLiteralToQuantity",
      "expression": "1.0.toQuantity() = 1.0 '1'",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.124583,
      "error": null
    },
    {
      "name": "testStringIntegerLiteralToQuantity",
      "expression": "'1'.toQuantity()",
      "result": [
        null
      ],
      "expected": [
        "1 '1'"
      ],
      "success": true,
      "executionTimeMs": 0.86275,
      "error": null
    },
    {
      "name": "testStringQuantityLiteralToQuantity",
      "expression": "'1 day'.toQuantity() = 1 day",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 9.077791,
      "error": null
    },
    {
      "name": "testStringQuantityDayLiteralToQuantity",
      "expression": "'1 day'.toQuantity() = 1 'd'",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.254375,
      "error": null
    },
    {
      "name": "testStringQuantityWeekLiteralToQuantity",
      "expression": "'1 \\'wk\\''.toQuantity() = 1 week",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.632791,
      "error": null
    },
    {
      "name": "testStringQuantityMonthLiteralToQuantity",
      "expression": "'1 \\'mo\\''.toQuantity() = 1 month",
      "result": [
        false
      ],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.61075,
      "error": null
    },
    {
      "name": "testStringQuantityYearLiteralToQuantity",
      "expression": "'1 \\'a\\''.toQuantity() = 1 year",
      "result": [
        false
      ],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.588083,
      "error": null
    },
    {
      "name": "testStringDecimalLiteralToQuantity",
      "expression": "'1.0'.toQuantity() ~ 1 '1'",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.542042,
      "error": null
    },
    {
      "name": "testIntegerLiteralConvertsToBoolean",
      "expression": "1.convertsToBoolean()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.448083,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testIntegerLiteralConvertsToBooleanFalse",
      "expression": "2.convertsToBoolean()",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 0.38775,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testNegativeIntegerLiteralConvertsToBooleanFalse",
      "expression": "(-1).convertsToBoolean()",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 0.41,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testIntegerLiteralFalseConvertsToBoolean",
      "expression": "0.convertsToBoolean()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.326625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testDecimalLiteralConvertsToBoolean",
      "expression": "1.0.convertsToBoolean()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.3405,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringTrueLiteralConvertsToBoolean",
      "expression": "'true'.convertsToBoolean()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.3,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringFalseLiteralConvertsToBoolean",
      "expression": "'false'.convertsToBoolean()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.291625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringFalseLiteralAlsoConvertsToBoolean",
      "expression": "'False'.convertsToBoolean()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.307375,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testTrueLiteralConvertsToBoolean",
      "expression": "true.convertsToBoolean()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.271792,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testFalseLiteralConvertsToBoolean",
      "expression": "false.convertsToBoolean()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.276667,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testIntegerLiteralToBoolean",
      "expression": "1.toBoolean()",
      "result": [
        "toboolean",
        1
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.68725,
      "error": null
    },
    {
      "name": "testIntegerLiteralToBooleanEmpty",
      "expression": "2.toBoolean()",
      "result": [
        "toboolean",
        2
      ],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.628583,
      "error": null
    },
    {
      "name": "testIntegerLiteralToBooleanFalse",
      "expression": "0.toBoolean()",
      "result": [
        "toboolean",
        0
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.629042,
      "error": null
    },
    {
      "name": "testStringTrueToBoolean",
      "expression": "'true'.toBoolean()",
      "result": [
        "toboolean",
        "true"
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.513375,
      "error": null
    },
    {
      "name": "testStringFalseToBoolean",
      "expression": "'false'.toBoolean()",
      "result": [
        "toboolean",
        "false"
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.565375,
      "error": null
    },
    {
      "name": "testIntegerLiteralConvertsToString",
      "expression": "1.convertsToString()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.5005,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testIntegerLiteralIsNotString",
      "expression": "1.is(String).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.506958,
      "error": null
    },
    {
      "name": "testNegativeIntegerLiteralConvertsToString",
      "expression": "(-1).convertsToString()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.622458,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testDecimalLiteralConvertsToString",
      "expression": "1.0.convertsToString()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.38575,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testStringLiteralConvertsToString",
      "expression": "'true'.convertsToString()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.325625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testBooleanLiteralConvertsToString",
      "expression": "true.convertsToString()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.304916,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testQuantityLiteralConvertsToString",
      "expression": "1 'wk'.convertsToString()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.296208,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testIntegerLiteralToString",
      "expression": "1.toString()",
      "result": "1",
      "expected": [
        "1"
      ],
      "success": true,
      "executionTimeMs": 0.617625,
      "error": null
    },
    {
      "name": "testNegativeIntegerLiteralToString",
      "expression": "(-1).toString()",
      "result": "1",
      "expected": [
        "-1"
      ],
      "success": true,
      "executionTimeMs": 0.627625,
      "error": null
    },
    {
      "name": "testDecimalLiteralToString",
      "expression": "1.0.toString()",
      "result": "1.0",
      "expected": [
        "1.0"
      ],
      "success": true,
      "executionTimeMs": 0.614875,
      "error": null
    },
    {
      "name": "testStringLiteralToString",
      "expression": "'true'.toString()",
      "result": "true",
      "expected": [
        "true"
      ],
      "success": true,
      "executionTimeMs": 0.455791,
      "error": null
    },
    {
      "name": "testBooleanLiteralToString",
      "expression": "true.toString()",
      "result": "true",
      "expected": [
        "true"
      ],
      "success": true,
      "executionTimeMs": 0.449583,
      "error": null
    },
    {
      "name": "testQuantityLiteralWkToString",
      "expression": "1 'wk'.toString()",
      "result": "[[]]",
      "expected": [
        "1 'wk'"
      ],
      "success": true,
      "executionTimeMs": 1.226083,
      "error": null
    },
    {
      "name": "testQuantityLiteralWeekToString",
      "expression": "1 week.toString()",
      "result": "[[[]]]",
      "expected": [
        "1 week"
      ],
      "success": true,
      "executionTimeMs": 0.90375,
      "error": null
    },
    {
      "name": "testBooleanImplies1",
      "expression": "(true implies true) = true",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.123917,
      "error": null
    },
    {
      "name": "testBooleanImplies2",
      "expression": "(true implies false) = false",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.806625,
      "error": null
    },
    {
      "name": "testBooleanImplies3",
      "expression": "(true implies {}).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.690167,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-implies"
    },
    {
      "name": "testBooleanImplies4",
      "expression": "(false implies true) = true",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.617666,
      "error": null
    },
    {
      "name": "testBooleanImplies5",
      "expression": "(false implies false) = true",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.75575,
      "error": null
    },
    {
      "name": "testBooleanImplies6",
      "expression": "(false implies {}) = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.675292,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-implies"
    },
    {
      "name": "testBooleanImplies7",
      "expression": "({} implies true) = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.61425,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-implies"
    },
    {
      "name": "testBooleanImplies8",
      "expression": "({} implies false).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.660625,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-implies"
    },
    {
      "name": "testBooleanImplies9",
      "expression": "({} implies {}).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.820458,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-implies"
    },
    {
      "name": "testToInteger1",
      "expression": "'1'.toInteger() = 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.853208,
      "error": null
    },
    {
      "name": "testToInteger2",
      "expression": "'-1'.toInteger() = -1",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.344125,
      "error": null
    },
    {
      "name": "testToInteger3",
      "expression": "'0'.toInteger() = 0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.759709,
      "error": null
    },
    {
      "name": "testToInteger4",
      "expression": "'0.0'.toInteger().empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.430167,
      "error": "For input string: \"0.0\""
    },
    {
      "name": "testToInteger5",
      "expression": "'st'.toInteger().empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.819208,
      "error": "For input string: \"st\""
    },
    {
      "name": "testStartsWith1",
      "expression": "'12345'.startsWith('2') = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.23925,
      "error": null
    },
    {
      "name": "testStartsWith2",
      "expression": "'12345'.startsWith('1') = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.449833,
      "error": null
    },
    {
      "name": "testStartsWith3",
      "expression": "'12345'.startsWith('12') = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.741167,
      "error": null
    },
    {
      "name": "testStartsWith4",
      "expression": "'12345'.startsWith('13') = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.770084,
      "error": null
    },
    {
      "name": "testStartsWith5",
      "expression": "'12345'.startsWith('12345') = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.699375,
      "error": null
    },
    {
      "name": "testStartsWith6",
      "expression": "'12345'.startsWith('123456') = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.148666,
      "error": null
    },
    {
      "name": "testStartsWith7",
      "expression": "'12345'.startsWith('') = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.392875,
      "error": null
    },
    {
      "name": "testStartsWith8",
      "expression": "{}.startsWith('1').empty() = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.6755,
      "error": null
    },
    {
      "name": "testStartsWith9",
      "expression": "{}.startsWith('').empty() = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.629792,
      "error": null
    },
    {
      "name": "testStartsWith10",
      "expression": "''.startsWith('') = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.013208,
      "error": null
    },
    {
      "name": "testStartsWith11",
      "expression": "{}.startsWith('').exists() = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.968,
      "error": null
    },
    {
      "name": "testStartsWith12",
      "expression": "'987654321'.startsWith(length().toString())",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.896583,
      "error": null
    },
    {
      "name": "testStartsWithNonString1",
      "expression": "Appointment.identifier.startsWith('rand')",
      "result": null,
      "expected": [],
      "success": true,
      "executionTimeMs": 0.887833,
      "error": null
    },
    {
      "name": "testLessThan1",
      "expression": "1 < 2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.829208,
      "error": null
    },
    {
      "name": "testLessThan2",
      "expression": "1.0 < 1.2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.867875,
      "error": null
    },
    {
      "name": "testLessThan3",
      "expression": "'a' < 'b'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.559542,
      "error": null
    },
    {
      "name": "testLessThan4",
      "expression": "'A' < 'a'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.493958,
      "error": null
    },
    {
      "name": "testLessThan5",
      "expression": "@2014-12-12 < @2014-12-13",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.490958,
      "error": null
    },
    {
      "name": "testLessThan6",
      "expression": "@2014-12-13T12:00:00 < @2014-12-13T12:00:01",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.540834,
      "error": null
    },
    {
      "name": "testLessThan7",
      "expression": "@T12:00:00 < @T14:00:00",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.69525,
      "error": null
    },
    {
      "name": "testLessThan8",
      "expression": "1 < 1",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.753208,
      "error": null
    },
    {
      "name": "testLessThan9",
      "expression": "1.0 < 1.0",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.588292,
      "error": null
    },
    {
      "name": "testLessThan10",
      "expression": "'a' < 'a'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.707583,
      "error": null
    },
    {
      "name": "testLessThan11",
      "expression": "'A' < 'A'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.598917,
      "error": null
    },
    {
      "name": "testLessThan12",
      "expression": "@2014-12-12 < @2014-12-12",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.452792,
      "error": null
    },
    {
      "name": "testLessThan13",
      "expression": "@2014-12-13T12:00:00 < @2014-12-13T12:00:00",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.416875,
      "error": null
    },
    {
      "name": "testLessThan14",
      "expression": "@T12:00:00 < @T12:00:00",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.426209,
      "error": null
    },
    {
      "name": "testLessThan15",
      "expression": "2 < 1",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.551083,
      "error": null
    },
    {
      "name": "testLessThan16",
      "expression": "1.1 < 1.0",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.573,
      "error": null
    },
    {
      "name": "testLessThan17",
      "expression": "'b' < 'a'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.481125,
      "error": null
    },
    {
      "name": "testLessThan18",
      "expression": "'B' < 'A'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.431417,
      "error": null
    },
    {
      "name": "testLessThan19",
      "expression": "@2014-12-13 < @2014-12-12",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.466042,
      "error": null
    },
    {
      "name": "testLessThan20",
      "expression": "@2014-12-13T12:00:01 < @2014-12-13T12:00:00",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.728917,
      "error": null
    },
    {
      "name": "testLessThan21",
      "expression": "@T12:00:01 < @T12:00:00",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.659542,
      "error": null
    },
    {
      "name": "testLessThan22",
      "expression": "Observation.value < 200 '[lb_av]'",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.670292,
      "error": null
    },
    {
      "name": "testLessThan23",
      "expression": "@2018-03 < @2018-03-01",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.734292,
      "error": null
    },
    {
      "name": "testLessThan24",
      "expression": "@2018-03-01T10:30 < @2018-03-01T10:30:00",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.787833,
      "error": null
    },
    {
      "name": "testLessThan25",
      "expression": "@T10:30 < @T10:30:00",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.702834,
      "error": null
    },
    {
      "name": "testLessThan26",
      "expression": "@2018-03-01T10:30:00 < @2018-03-01T10:30:00.0",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 2.666208,
      "error": null
    },
    {
      "name": "testLessThan27",
      "expression": "@T10:30:00 < @T10:30:00.0",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.737875,
      "error": null
    },
    {
      "name": "testLessThanEmpty1",
      "expression": "1 < {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.638209,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-lt"
    },
    {
      "name": "testLessThanEmpty2",
      "expression": "{} < 1",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.546375,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-lt"
    },
    {
      "name": "testLessThanEmpty3",
      "expression": "{} < {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.466959,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-lt"
    },
    {
      "name": "LowBoundaryDecimalDefault",
      "expression": "1.587.lowBoundary()",
      "result": null,
      "expected": [
        1.5865
      ],
      "success": false,
      "executionTimeMs": 0.461666,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDecimal1",
      "expression": "1.587.lowBoundary(6)",
      "result": null,
      "expected": [
        1.5865
      ],
      "success": false,
      "executionTimeMs": 0.476417,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDecimal2",
      "expression": "1.587.lowBoundary(2)",
      "result": null,
      "expected": [
        1.58
      ],
      "success": false,
      "executionTimeMs": 0.420833,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDecimal3",
      "expression": "1.587.lowBoundary(-1)",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.418334,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDecimal4",
      "expression": "1.587.lowBoundary(0)",
      "result": null,
      "expected": [
        1
      ],
      "success": false,
      "executionTimeMs": 0.562,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDecimal5",
      "expression": "1.587.lowBoundary(32)",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.47175,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryNegDecimalDefault",
      "expression": "(-1.587).lowBoundary()",
      "result": null,
      "expected": [
        -1.5875
      ],
      "success": false,
      "executionTimeMs": 0.404375,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryNegDecimal1",
      "expression": "(-1.587).lowBoundary(6)",
      "result": null,
      "expected": [
        -1.5875
      ],
      "success": false,
      "executionTimeMs": 0.454292,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryNegDecimal2",
      "expression": "(-1.587).lowBoundary(2)",
      "result": null,
      "expected": [
        -1.59
      ],
      "success": false,
      "executionTimeMs": 0.424417,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryNegDecimal3",
      "expression": "(-1.587).lowBoundary(-1)",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.519167,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryNegDecimal4",
      "expression": "(-1.587).lowBoundary(0)",
      "result": null,
      "expected": [
        -2
      ],
      "success": false,
      "executionTimeMs": 0.465541,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryNegDecimal5",
      "expression": "(-1.587).lowBoundary(32)",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.412542,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDecimal6",
      "expression": "1.587.lowBoundary(39)",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.392125,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDecimal7",
      "expression": "1.toDecimal().lowBoundary()",
      "result": null,
      "expected": [
        0.5
      ],
      "success": false,
      "executionTimeMs": 0.345333,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDecimal8",
      "expression": "1.lowBoundary(0)",
      "result": null,
      "expected": [
        0
      ],
      "success": false,
      "executionTimeMs": 0.375167,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDecimal9",
      "expression": "1.lowBoundary(5)",
      "result": null,
      "expected": [
        0.5
      ],
      "success": false,
      "executionTimeMs": 0.361709,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDecimal10",
      "expression": "12.587.lowBoundary(2)",
      "result": null,
      "expected": [
        12.58
      ],
      "success": false,
      "executionTimeMs": 0.359125,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDecimal11",
      "expression": "12.500.lowBoundary(4)",
      "result": null,
      "expected": [
        12.4995
      ],
      "success": false,
      "executionTimeMs": 0.369375,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDecimal12",
      "expression": "120.lowBoundary(2)",
      "result": null,
      "expected": [
        119.5
      ],
      "success": false,
      "executionTimeMs": 0.362959,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDecimal13",
      "expression": "(-120).lowBoundary(2)",
      "result": null,
      "expected": [
        -120.5
      ],
      "success": false,
      "executionTimeMs": 0.414917,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDecimal14",
      "expression": "0.0034.lowBoundary(1)",
      "result": null,
      "expected": [
        0
      ],
      "success": false,
      "executionTimeMs": 0.381708,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDecimal15",
      "expression": "(-0.0034).lowBoundary(1)",
      "result": null,
      "expected": [
        0
      ],
      "success": false,
      "executionTimeMs": 0.413666,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryQuantity",
      "expression": "1.587 'cm'.lowBoundary(8)",
      "result": null,
      "expected": [
        "1.58650000 'cm'"
      ],
      "success": false,
      "executionTimeMs": 0.362792,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDateMonth",
      "expression": "@2014.lowBoundary(6)",
      "result": null,
      "expected": [
        "@2014-01"
      ],
      "success": false,
      "executionTimeMs": 0.329208,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDateTimeMillisecond1",
      "expression": "@2014-01-01T08.lowBoundary(17)",
      "result": null,
      "expected": [
        "@2014-01-01T08:00:00.000+14:00"
      ],
      "success": false,
      "executionTimeMs": 0.368875,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDateTimeMillisecond2",
      "expression": "@2014-01-01T08:05+08:00.lowBoundary(17)",
      "result": null,
      "expected": [
        "@2014-01-01T08:05:00.000+08:00"
      ],
      "success": false,
      "executionTimeMs": 0.361375,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryDateTimeMillisecond3",
      "expression": "@2014-01-01T08.lowBoundary(8)",
      "result": null,
      "expected": [
        "@2014-01-01"
      ],
      "success": false,
      "executionTimeMs": 0.372416,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "LowBoundaryTimeMillisecond",
      "expression": "@T10:30.lowBoundary(9)",
      "result": null,
      "expected": [
        "@T10:30:00.000"
      ],
      "success": false,
      "executionTimeMs": 0.378834,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLog1",
      "expression": "16.log(2) = 4.0",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.476041,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLog2",
      "expression": "100.0.log(10.0) = 2.0",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.419542,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLogEmpty",
      "expression": "{}.log(10).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.391333,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLogEmpty2",
      "expression": "{}.log({}).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.328917,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLogEmpty3",
      "expression": "16.log({}).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.377375,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testDivide1",
      "expression": "1 \/ 1 = 1",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.927167,
      "error": null
    },
    {
      "name": "testDivide2",
      "expression": "4 \/ 2 = 2",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.840458,
      "error": null
    },
    {
      "name": "testDivide3",
      "expression": "4.0 \/ 2.0 = 2.0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.783041,
      "error": null
    },
    {
      "name": "testDivide4",
      "expression": "1 \/ 2 = 0.5",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.711375,
      "error": null
    },
    {
      "name": "testDivide5",
      "expression": "(1.2 \/ 1.8).round(2) = 0.67",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.159709,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testDivide6",
      "expression": "1 \/ 0",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.789542,
      "error": "Divide by zero"
    },
    {
      "name": "testDivideEmpty1",
      "expression": "1 \/ {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.619708,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-division"
    },
    {
      "name": "testDivideEmpty2",
      "expression": "{} \/ 1",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.501875,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-division"
    },
    {
      "name": "testDivideEmpty3",
      "expression": "{} \/ {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.467916,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-division"
    },
    {
      "name": "testAbs1",
      "expression": "(-5).abs() = 5",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.485,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testAbs2",
      "expression": "(-5.5).abs() = 5.5",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.415958,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testAbs3",
      "expression": "(-5.5 'mg').abs() = 5.5 'mg'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.429375,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testAbsEmpty",
      "expression": "{}.abs().empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.367333,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testPrecedence1",
      "expression": "-1.convertsToInteger()",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.381459,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testPrecedence2",
      "expression": "1+2*3+4 = 11",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.244,
      "error": null
    },
    {
      "name": "testPrecedence3",
      "expression": "1 > 2 is Boolean",
      "result": [
        [
          false
        ],
        [
          [
            "Boolean"
          ]
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.906375,
      "error": null
    },
    {
      "name": "testPrecedence4",
      "expression": "1 | 1 is Integer",
      "result": [
        [
          1
        ],
        [
          [
            "Integer"
          ]
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.693708,
      "error": null
    },
    {
      "name": "testPrecedence5",
      "expression": "true and '0215' in ('0215' | '0216')",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.8055,
      "error": null
    },
    {
      "name": "testPrecedence6",
      "expression": "category.exists(coding.exists(system = 'http:\/\/terminology.hl7.org\/CodeSystem\/observation-category' and code.trace('c') in ('vital-signs' | 'vital-signs2').trace('codes')))",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.825959,
      "error": null
    },
    {
      "name": "testToString1",
      "expression": "1.toString() = '1'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.853,
      "error": null
    },
    {
      "name": "testToString2",
      "expression": "'-1'.toInteger() = -1",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.630792,
      "error": null
    },
    {
      "name": "testToString3",
      "expression": "0.toString() = '0'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.559667,
      "error": null
    },
    {
      "name": "testToString4",
      "expression": "0.0.toString() = '0.0'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.5865,
      "error": null
    },
    {
      "name": "testToString5",
      "expression": "@2014-12-14.toString() = '2014-12-14'",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.556291,
      "error": null
    },
    {
      "name": "testToday1",
      "expression": "Patient.birthDate < today()",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.841542,
      "error": null
    },
    {
      "name": "testToday2",
      "expression": "today().toString().length() = 10",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.69975,
      "error": null
    },
    {
      "name": "testCombine1",
      "expression": "concept.code.combine($this.descendants().concept.code).isDistinct()",
      "result": true,
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.138,
      "error": null
    },
    {
      "name": "testCombine2",
      "expression": "name.given.combine(name.family).exclude('Jim')",
      "result": [
        "exclude",
        [
          [
            "Peter",
            "James",
            "Jim",
            "Peter",
            "James",
            "Chalmers",
            "Windsor"
          ],
          "Jim"
        ]
      ],
      "expected": [
        "Peter",
        "James",
        "Peter",
        "James"
      ],
      "success": true,
      "executionTimeMs": 0.890416,
      "error": null
    },
    {
      "name": "testCombine3",
      "expression": "name.given.combine($this.name.family).exclude('Jim')",
      "result": [
        "exclude",
        [
          [
            "Peter",
            "James",
            "Jim",
            "Peter",
            "James",
            "Chalmers",
            "Windsor"
          ],
          "Jim"
        ]
      ],
      "expected": [
        "Peter",
        "James",
        "Peter",
        "James",
        "Chalmers",
        "Windsor"
      ],
      "success": true,
      "executionTimeMs": 0.762417,
      "error": null
    },
    {
      "name": "testFirstLast1",
      "expression": "Patient.name.first().given = 'Peter' | 'James'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.726834,
      "error": null
    },
    {
      "name": "testFirstLast2",
      "expression": "Patient.name.last().given = 'Peter' | 'James'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.891167,
      "error": null
    },
    {
      "name": "testTail1",
      "expression": "(0 | 1 | 2).tail() = 1 | 2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.101208,
      "error": null
    },
    {
      "name": "testTail2",
      "expression": "Patient.name.tail().given = 'Jim' | 'Peter' | 'James'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.898208,
      "error": null
    },
    {
      "name": "testBooleanLogicAnd1",
      "expression": "(true and true) = true",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.841042,
      "error": null
    },
    {
      "name": "testBooleanLogicAnd2",
      "expression": "(true and false) = false",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.72725,
      "error": null
    },
    {
      "name": "testBooleanLogicAnd3",
      "expression": "(true and {}).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.686417,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-and"
    },
    {
      "name": "testBooleanLogicAnd4",
      "expression": "(false and true) = false",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.657292,
      "error": null
    },
    {
      "name": "testBooleanLogicAnd5",
      "expression": "(false and false) = false",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.591583,
      "error": null
    },
    {
      "name": "testBooleanLogicAnd6",
      "expression": "(false and {}) = false",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.535875,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-and"
    },
    {
      "name": "testBooleanLogicAnd7",
      "expression": "({} and true).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.515208,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-and"
    },
    {
      "name": "testBooleanLogicAnd8",
      "expression": "({} and false) = false",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.504084,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-and"
    },
    {
      "name": "testBooleanLogicAnd9",
      "expression": "({} and {}).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.499542,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-and"
    },
    {
      "name": "testFHIRPathIsFunction1",
      "expression": "Patient.gender.is(code)",
      "result": [
        "is",
        [
          "male",
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.573667,
      "error": null
    },
    {
      "name": "testFHIRPathIsFunction2",
      "expression": "Patient.gender.is(string)",
      "result": [
        "is",
        [
          "male",
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.601792,
      "error": null
    },
    {
      "name": "testFHIRPathIsFunction3",
      "expression": "Patient.gender.is(id)",
      "result": [
        "is",
        [
          "male",
          "example"
        ]
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.575708,
      "error": null
    },
    {
      "name": "testFHIRPathIsFunction4",
      "expression": "Questionnaire.url.is(uri)",
      "result": [
        "is",
        [
          "http:\/\/hl7.org\/fhir\/Questionnaire\/3141",
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.701625,
      "error": null
    },
    {
      "name": "testFHIRPathIsFunction5",
      "expression": "Questionnaire.url.is(url)",
      "result": [
        "is",
        [
          "http:\/\/hl7.org\/fhir\/Questionnaire\/3141",
          "http:\/\/hl7.org\/fhir\/Questionnaire\/3141"
        ]
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.961792,
      "error": null
    },
    {
      "name": "testFHIRPathIsFunction6",
      "expression": "ValueSet.version.is(string)",
      "result": [
        "is",
        [
          20150622,
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.978792,
      "error": null
    },
    {
      "name": "testFHIRPathIsFunction7",
      "expression": "ValueSet.version.is(code)",
      "result": [
        "is",
        [
          20150622,
          null
        ]
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.803542,
      "error": null
    },
    {
      "name": "testFHIRPathIsFunction8",
      "expression": "Observation.extension('http:\/\/example.com\/fhir\/StructureDefinition\/patient-age').value is Age",
      "result": [
        [],
        [
          [
            "Age"
          ]
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 4.486584,
      "error": null
    },
    {
      "name": "testFHIRPathIsFunction9",
      "expression": "Observation.extension('http:\/\/example.com\/fhir\/StructureDefinition\/patient-age').value is Quantity",
      "result": [
        [],
        [
          [
            "Quantity"
          ]
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.983625,
      "error": null
    },
    {
      "name": "testFHIRPathIsFunction10",
      "expression": "Observation.extension('http:\/\/example.com\/fhir\/StructureDefinition\/patient-age').value is Duration",
      "result": [
        [],
        [
          [
            "Duration"
          ]
        ]
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.015666,
      "error": null
    },
    {
      "name": "testFHIRPathAsFunction11",
      "expression": "Patient.gender.as(string)",
      "result": [
        "as",
        [
          "male",
          null
        ]
      ],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.976708,
      "error": null
    },
    {
      "name": "testFHIRPathAsFunction12",
      "expression": "Patient.gender.as(code)",
      "result": [
        "as",
        [
          "male",
          null
        ]
      ],
      "expected": [
        "male"
      ],
      "success": true,
      "executionTimeMs": 0.820334,
      "error": null
    },
    {
      "name": "testFHIRPathAsFunction13",
      "expression": "Patient.gender.as(id)",
      "result": [
        "as",
        [
          "male",
          "example"
        ]
      ],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.741625,
      "error": null
    },
    {
      "name": "testFHIRPathAsFunction14",
      "expression": "ValueSet.version.as(string)",
      "result": [
        "as",
        [
          20150622,
          null
        ]
      ],
      "expected": [
        "20150622"
      ],
      "success": true,
      "executionTimeMs": 7.088917,
      "error": null
    },
    {
      "name": "testFHIRPathAsFunction15",
      "expression": "ValueSet.version.as(code)",
      "result": [
        "as",
        [
          20150622,
          null
        ]
      ],
      "expected": [],
      "success": true,
      "executionTimeMs": 1.749125,
      "error": null
    },
    {
      "name": "testFHIRPathAsFunction16",
      "expression": "Patient.gender.ofType(string)",
      "result": [
        "male"
      ],
      "expected": [],
      "success": true,
      "executionTimeMs": 1.068333,
      "error": null
    },
    {
      "name": "testFHIRPathAsFunction17",
      "expression": "Patient.gender.ofType(code)",
      "result": [],
      "expected": [
        "male"
      ],
      "success": true,
      "executionTimeMs": 2.28875,
      "error": null
    },
    {
      "name": "testFHIRPathAsFunction18",
      "expression": "Patient.gender.ofType(id)",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.941417,
      "error": null
    },
    {
      "name": "testFHIRPathAsFunction19",
      "expression": "ValueSet.version.ofType(string)",
      "result": [],
      "expected": [
        "20150622"
      ],
      "success": true,
      "executionTimeMs": 0.735833,
      "error": null
    },
    {
      "name": "testFHIRPathAsFunction20",
      "expression": "ValueSet.version.ofType(code)",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.744167,
      "error": null
    },
    {
      "name": "testFHIRPathAsFunction21",
      "expression": "Patient.name.as(HumanName).use",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.810041,
      "error": null
    },
    {
      "name": "testFHIRPathAsFunction22",
      "expression": "Patient.name.ofType(HumanName).use",
      "result": [],
      "expected": [
        "official",
        "usual",
        "maiden"
      ],
      "success": true,
      "executionTimeMs": 0.893625,
      "error": null
    },
    {
      "name": "testFHIRPathAsFunction23",
      "expression": "Patient.gender.as(string1)",
      "result": [
        "as",
        [
          "male",
          null
        ]
      ],
      "expected": [],
      "success": true,
      "executionTimeMs": 1.129333,
      "error": null
    },
    {
      "name": "testFHIRPathAsFunction24",
      "expression": "Patient.gender.ofType(string1)",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 2.412125,
      "error": null
    },
    {
      "name": "testConcatenate1",
      "expression": "'a' & 'b' = 'ab'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.243875,
      "error": null
    },
    {
      "name": "testConcatenate2",
      "expression": "'1' & {} = '1'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.794667,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-&"
    },
    {
      "name": "testConcatenate3",
      "expression": "{} & 'b' = 'b'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.711583,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-&"
    },
    {
      "name": "testConcatenate4",
      "expression": "(1 | 2 | 3) & 'b' = '1,2,3b'",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 2.917666,
      "error": null
    },
    {
      "name": "testTrim1",
      "expression": "'123456'.trim().length() = 6",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.204167,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testTrim2",
      "expression": "'123 456'.trim().length() = 7",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 2.148084,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testTrim3",
      "expression": "' 123456 '.trim().length() = 6",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.893542,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testTrim4",
      "expression": "'  '.trim().length() = 0",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.591584,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testTrim5",
      "expression": "{}.trim().empty() = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.425208,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testTrim6",
      "expression": "'      '.trim() = ''",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.405833,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testEquality1",
      "expression": "1 = 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.760625,
      "error": null
    },
    {
      "name": "testEquality2",
      "expression": "{} = {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.57325,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-eq"
    },
    {
      "name": "testEquality3",
      "expression": "true = {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.512541,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-eq"
    },
    {
      "name": "testEquality4",
      "expression": "(1) = (1)",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.691417,
      "error": null
    },
    {
      "name": "testEquality5",
      "expression": "(1 | 2) = (1 | 2)",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.037583,
      "error": null
    },
    {
      "name": "testEquality6",
      "expression": "(1 | 2 | 3) = (1 | 2 | 3)",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.395208,
      "error": null
    },
    {
      "name": "testEquality7",
      "expression": "(1 | 1) = (1 | 2 | {})",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 1.008917,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-union"
    },
    {
      "name": "testEquality8",
      "expression": "1 = 2",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.716833,
      "error": null
    },
    {
      "name": "testEquality9",
      "expression": "'a' = 'a'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.502166,
      "error": null
    },
    {
      "name": "testEquality10",
      "expression": "'a' = 'A'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.8055,
      "error": null
    },
    {
      "name": "testEquality11",
      "expression": "'a' = 'b'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.722,
      "error": null
    },
    {
      "name": "testEquality12",
      "expression": "1.1 = 1.1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.342125,
      "error": null
    },
    {
      "name": "testEquality13",
      "expression": "1.1 = 1.2",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 5.954208,
      "error": null
    },
    {
      "name": "testEquality14",
      "expression": "1.10 = 1.1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.839583,
      "error": null
    },
    {
      "name": "testEquality15",
      "expression": "0 = 0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.424709,
      "error": null
    },
    {
      "name": "testEquality16",
      "expression": "0.0 = 0",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.245666,
      "error": null
    },
    {
      "name": "testEquality17",
      "expression": "@2012-04-15 = @2012-04-15",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.9165,
      "error": null
    },
    {
      "name": "testEquality18",
      "expression": "@2012-04-15 = @2012-04-16",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.751292,
      "error": null
    },
    {
      "name": "testEquality19",
      "expression": "@2012-04-15 = @2012-04-15T10:00:00",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.6585,
      "error": null
    },
    {
      "name": "testEquality20",
      "expression": "@2012-04-15T15:00:00 = @2012-04-15T10:00:00",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.6755,
      "error": null
    },
    {
      "name": "testEquality21",
      "expression": "@2012-04-15T15:30:31 = @2012-04-15T15:30:31.0",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.654667,
      "error": null
    },
    {
      "name": "testEquality22",
      "expression": "@2012-04-15T15:30:31 = @2012-04-15T15:30:31.1",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.922958,
      "error": null
    },
    {
      "name": "testEquality23",
      "expression": "@2012-04-15T15:00:00Z = @2012-04-15T10:00:00",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.693875,
      "error": null
    },
    {
      "name": "testEquality24",
      "expression": "@2012-04-15T15:00:00+02:00 = @2012-04-15T16:00:00+03:00",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.931583,
      "error": null
    },
    {
      "name": "testEquality25",
      "expression": "name = name",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.036,
      "error": null
    },
    {
      "name": "testEquality26",
      "expression": "name.take(2) = name.take(2).first() | name.take(2).last()",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.92275,
      "error": null
    },
    {
      "name": "testEquality27",
      "expression": "name.take(2) = name.take(2).last() | name.take(2).first()",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 2.235958,
      "error": null
    },
    {
      "name": "testEquality28",
      "expression": "Observation.value = 185 '[lb_av]'",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.476709,
      "error": null
    },
    {
      "name": "testAggregate1",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate($this+$total, 0) = 45",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.94,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testAggregate2",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate($this+$total, 2) = 47",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.323542,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testAggregate3",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate(iif($total.empty(), $this, iif($this < $total, $this, $total))) = 1",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.591875,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testAggregate4",
      "expression": "(1|2|3|4|5|6|7|8|9).aggregate(iif($total.empty(), $this, iif($this > $total, $this, $total))) = 9",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.878834,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSubSetOf1",
      "expression": "Patient.name.first().subsetOf($this.name)",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.492125,
      "error": null
    },
    {
      "name": "testSubSetOf2",
      "expression": "Patient.name.subsetOf($this.name.first()).not()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.477625,
      "error": null
    },
    {
      "name": "testSubSetOf3",
      "expression": "supportingInfo.where(category.coding.code = 'additionalbodysite').sequence.subsetOf($this.item.informationSequence)",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.948792,
      "error": null
    },
    {
      "name": "testDiv1",
      "expression": "1 div 1 = 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.671458,
      "error": null
    },
    {
      "name": "testDiv2",
      "expression": "4 div 2 = 2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.015542,
      "error": null
    },
    {
      "name": "testDiv3",
      "expression": "5 div 2 = 2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.411917,
      "error": null
    },
    {
      "name": "testDiv4",
      "expression": "2.2 div 1.8 = 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.751709,
      "error": null
    },
    {
      "name": "testDiv5",
      "expression": "5 div 0",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.981167,
      "error": "Divide by zero"
    },
    {
      "name": "testDivEmpty1",
      "expression": "1 div {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.820166,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-div"
    },
    {
      "name": "testDivEmpty2",
      "expression": "{} div 1",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.671208,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-div"
    },
    {
      "name": "testDivEmpty3",
      "expression": "{} div {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 1.404042,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-div"
    },
    {
      "name": "testIn1",
      "expression": "1 in (1 | 2 | 3)",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.7505,
      "error": null
    },
    {
      "name": "testIn2",
      "expression": "1 in (2 | 3)",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.9465,
      "error": null
    },
    {
      "name": "testIn3",
      "expression": "'a' in ('a' | 'c' | 'd')",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.800459,
      "error": null
    },
    {
      "name": "testIn4",
      "expression": "'b' in ('a' | 'c' | 'd')",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.71675,
      "error": null
    },
    {
      "name": "testIn5",
      "expression": "('a' | 'c' | 'd') in 'b'",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 1.32925,
      "error": "Expected only one element, but [\"a\" \"c\" \"d\"]"
    },
    {
      "name": "testInEmptyCollection",
      "expression": "1 in {}",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 1.389041,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-in"
    },
    {
      "name": "testInEmptyValue",
      "expression": "{} in (1 | 2 | 3)",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 2.035666,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-in"
    },
    {
      "name": "testInEmptyBoth",
      "expression": "{} in {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.921584,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-in"
    },
    {
      "name": "Comparable1",
      "expression": "1 'cm'.comparable(1 '[in_i]')",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.98925,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "Comparable2",
      "expression": "1 'cm'.comparable(1 '[s]')",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 1.366375,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "Comparable3",
      "expression": "1 'cm'.comparable(1 's')",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 1.137,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testQuantity1",
      "expression": "4.0000 'g' = 4000.0 'mg'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 3.001125,
      "error": null
    },
    {
      "name": "testQuantity2",
      "expression": "4 'g' ~ 4000 'mg'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 3.300083,
      "error": null
    },
    {
      "name": "testQuantity3",
      "expression": "4 'g' != 4040 'mg'",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.226084,
      "error": null
    },
    {
      "name": "testQuantity4",
      "expression": "4 'g' ~ 4040 'mg'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 4.73275,
      "error": null
    },
    {
      "name": "testQuantity5",
      "expression": "7 days = 1 week",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 3.030042,
      "error": null
    },
    {
      "name": "testQuantity6",
      "expression": "7 days = 1 'wk'",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.965416,
      "error": null
    },
    {
      "name": "testQuantity7",
      "expression": "6 days < 1 week",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 2.813667,
      "error": "[[[]]] clojure.core$_LT_@4a62062a [[[]]] wrong type"
    },
    {
      "name": "testQuantity8",
      "expression": "8 days > 1 week",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 3.220042,
      "error": "[[[]]] clojure.core$_GT_@1511d157 [[[]]] wrong type"
    },
    {
      "name": "testQuantity9",
      "expression": "2.0 'cm' * 2.0 'm' = 0.040 'm2'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 2.092417,
      "error": "[[]]  clojure.core$_STAR_@1eca3ea7 [[]] type missmatch"
    },
    {
      "name": "testQuantity10",
      "expression": "4.0 'g' \/ 2.0 'm' = 2 'g\/m'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 2.109292,
      "error": "[[]]  clojure.core$_SLASH_@67328bcb [[]] type missmatch"
    },
    {
      "name": "testQuantity11",
      "expression": "1.0 'm' \/ 1.0 'm' = 1 '1'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 3.378333,
      "error": "[[]]  clojure.core$_SLASH_@67328bcb [[]] type missmatch"
    },
    {
      "name": "testLength1",
      "expression": "'123456'.length() = 6",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.865625,
      "error": null
    },
    {
      "name": "testLength2",
      "expression": "'12345'.length() = 5",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.274459,
      "error": null
    },
    {
      "name": "testLength3",
      "expression": "'123'.length() = 3",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.082417,
      "error": null
    },
    {
      "name": "testLength4",
      "expression": "'1'.length() = 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.356458,
      "error": null
    },
    {
      "name": "testLength5",
      "expression": "''.length() = 0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.065458,
      "error": null
    },
    {
      "name": "testLength6",
      "expression": "{}.length().empty() = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.804125,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-length-fn"
    },
    {
      "name": "testCount1",
      "expression": "Patient.name.count()",
      "result": 3,
      "expected": [
        3
      ],
      "success": true,
      "executionTimeMs": 1.043375,
      "error": null
    },
    {
      "name": "testCount2",
      "expression": "Patient.name.count() = 3",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.665541,
      "error": null
    },
    {
      "name": "testCount3",
      "expression": "Patient.name.first().count()",
      "result": 1,
      "expected": [
        1
      ],
      "success": true,
      "executionTimeMs": 1.14925,
      "error": null
    },
    {
      "name": "testCount4",
      "expression": "Patient.name.first().count() = 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.756542,
      "error": null
    },
    {
      "name": "testCeiling1",
      "expression": "1.ceiling() = 1",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.91825,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testCeiling2",
      "expression": "(-1.1).ceiling() = -1",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.693459,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testCeiling3",
      "expression": "1.1.ceiling() = 2",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.425625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testCeilingEmpty",
      "expression": "{}.ceiling().empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.4905,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testReplace1",
      "expression": "'123456'.replace('234', 'X')",
      "result": "1X56",
      "expected": [
        "1X56"
      ],
      "success": true,
      "executionTimeMs": 2.172625,
      "error": null
    },
    {
      "name": "testReplace2",
      "expression": "'abc'.replace('', 'x')",
      "result": "xaxbxcx",
      "expected": [
        "xaxbxcx"
      ],
      "success": true,
      "executionTimeMs": 1.098916,
      "error": null
    },
    {
      "name": "testReplace3",
      "expression": "'123456'.replace('234', '')",
      "result": "156",
      "expected": [
        "156"
      ],
      "success": true,
      "executionTimeMs": 1.442875,
      "error": null
    },
    {
      "name": "testReplace4",
      "expression": "{}.replace('234', 'X').empty() = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.048458,
      "error": null
    },
    {
      "name": "testReplace5",
      "expression": "'123'.replace({}, 'X').empty() = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.9615,
      "error": null
    },
    {
      "name": "testReplace6",
      "expression": "'123'.replace('2', {}).empty() = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.861959,
      "error": null
    },
    {
      "name": "testExp1",
      "expression": "0.exp() = 1",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.826,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testExp2",
      "expression": "(-0.0).exp() = 1",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.548042,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testExp3",
      "expression": "{}.exp().empty() = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.427459,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable1",
      "expression": "defineVariable('v1', 'value1').select(%v1)",
      "result": null,
      "expected": [
        "value1"
      ],
      "success": false,
      "executionTimeMs": 0.635542,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable2",
      "expression": "defineVariable('n1', name.first()).select(%n1.given)",
      "result": null,
      "expected": [
        "Peter",
        "James"
      ],
      "success": false,
      "executionTimeMs": 0.543583,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable3",
      "expression": "defineVariable('n1', name.first()).select(%n1.given).first()",
      "result": null,
      "expected": [
        "Peter"
      ],
      "success": false,
      "executionTimeMs": 0.692834,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable4",
      "expression": "defineVariable('n1', name.first()).select(%n1.given) | defineVariable('n1', name.skip(1).first()).select(%n1.given)",
      "result": null,
      "expected": [
        "Peter",
        "James",
        "Jim"
      ],
      "success": false,
      "executionTimeMs": 1.294958,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable5",
      "expression": "defineVariable('n1', name.first()).where(active.not()) | defineVariable('n1', name.skip(1).first()).select(%n1.given)",
      "result": null,
      "expected": [
        "Jim"
      ],
      "success": false,
      "executionTimeMs": 1.209833,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable6",
      "expression": "defineVariable('n1', name.first()).select(id & '-' & %n1.given.join('|')) | defineVariable('n2', name.skip(1).first()).select(%n2.given)",
      "result": null,
      "expected": [
        "example-Peter|James",
        "Jim"
      ],
      "success": false,
      "executionTimeMs": 1.801667,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable7",
      "expression": "defineVariable('n1', name.first()).active | defineVariable('n2', name.skip(1).first()).select(%n2.given)",
      "result": null,
      "expected": [
        true,
        "Jim"
      ],
      "success": false,
      "executionTimeMs": 1.078667,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable8",
      "expression": "defineVariable('v1', 'value1').select(%v1).trace('data').defineVariable('v2', 'value2').select($this & ':' & %v1 & '-' & %v2) | defineVariable('v3', 'value3').select(%v3)",
      "result": null,
      "expected": [
        "value1:value1-value2",
        "value3"
      ],
      "success": false,
      "executionTimeMs": 1.235875,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable9",
      "expression": "defineVariable('n1', name.first()).active | defineVariable('n2', name.skip(1).first()).select(%n1.given)",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 1.086375,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable10",
      "expression": "select(%fam.given)",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 1.178583,
      "error": null
    },
    {
      "name": "dvRedefiningVariableThrowsError",
      "expression": "defineVariable('v1').defineVariable('v1').select(%v1)",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 1.269166,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable12",
      "expression": "Patient.name.defineVariable('n1', first()).active | Patient.name.defineVariable('n2', skip(1).first()).select(%n1.given)",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 1.667041,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable13",
      "expression": "Patient.name.defineVariable('n2', skip(1).first()).defineVariable('res', %n2.given+%n2.given).select(%res)",
      "result": null,
      "expected": [
        "JimJim",
        "JimJim",
        "JimJim"
      ],
      "success": false,
      "executionTimeMs": 1.285542,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable14",
      "expression": "Patient.name.defineVariable('n1', first()).select(%n1).exists() | Patient.name.defineVariable('n2', skip(1).first()).defineVariable('res', %n2.given+%n2.given).select(%res)",
      "result": null,
      "expected": [
        true,
        "JimJim"
      ],
      "success": false,
      "executionTimeMs": 2.6245,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable15",
      "expression": "defineVariable('root', 'r1-').select(defineVariable('v1', 'v1').defineVariable('v2', 'v2').select(%v1 | %v2)).select(%root & $this)",
      "result": null,
      "expected": [
        "r1-v1",
        "r1-v2"
      ],
      "success": false,
      "executionTimeMs": 1.26225,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable16",
      "expression": "defineVariable('root', 'r1-').select(defineVariable('v1', 'v1').defineVariable('v2', 'v2').select(%v1 | %v2)).select(%root & $this & %v1)",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 1.895541,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "dvCantOverwriteSystemVar",
      "expression": "defineVariable('context', 'oops')",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.691125,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "defineVariable19",
      "expression": "defineVariable(defineVariable('param','ppp').select(%param), defineVariable('param','value').select(%param)).select(%ppp)",
      "result": null,
      "expected": [
        "value"
      ],
      "success": false,
      "executionTimeMs": 0.859542,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "dvParametersDontColide",
      "expression": "'aaa'.replace(defineVariable('param', 'aaa').select(%param), defineVariable('param','bbb').select(%param))",
      "result": null,
      "expected": [
        "bbb"
      ],
      "success": false,
      "executionTimeMs": 0.64625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "dvUsageOutsideScopeThrows",
      "expression": "defineVariable('n1', 'v1').active | defineVariable('n2', 'v2').select(%n1)",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 1.067708,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSimple",
      "expression": "name.given",
      "result": [
        "Peter",
        "James",
        "Jim",
        "Peter",
        "James"
      ],
      "expected": [
        "Peter",
        "James",
        "Jim",
        "Peter",
        "James"
      ],
      "success": true,
      "executionTimeMs": 0.785292,
      "error": null
    },
    {
      "name": "testSimpleNone",
      "expression": "name.suffix",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.697459,
      "error": null
    },
    {
      "name": "testEscapedIdentifier",
      "expression": "name.`given`",
      "result": [
        "Peter",
        "James",
        "Jim",
        "Peter",
        "James"
      ],
      "expected": [
        "Peter",
        "James",
        "Jim",
        "Peter",
        "James"
      ],
      "success": true,
      "executionTimeMs": 0.699875,
      "error": null
    },
    {
      "name": "testSimpleBackTick1",
      "expression": "`Patient`.name.`given`",
      "result": [
        "Peter",
        "James",
        "Jim",
        "Peter",
        "James"
      ],
      "expected": [
        "Peter",
        "James",
        "Jim",
        "Peter",
        "James"
      ],
      "success": true,
      "executionTimeMs": 0.842625,
      "error": null
    },
    {
      "name": "testSimpleFail",
      "expression": "name.given1",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.694042,
      "error": null
    },
    {
      "name": "testSimpleWithContext",
      "expression": "Patient.name.given",
      "result": [
        "Peter",
        "James",
        "Jim",
        "Peter",
        "James"
      ],
      "expected": [
        "Peter",
        "James",
        "Jim",
        "Peter",
        "James"
      ],
      "success": true,
      "executionTimeMs": 0.80675,
      "error": null
    },
    {
      "name": "testSimpleWithWrongContext",
      "expression": "Encounter.name.given",
      "result": null,
      "expected": [],
      "success": true,
      "executionTimeMs": 0.781375,
      "error": null
    },
    {
      "name": "testPolymorphismA",
      "expression": "Observation.value.unit",
      "result": null,
      "expected": [
        "lbs"
      ],
      "success": true,
      "executionTimeMs": 1.314084,
      "error": null
    },
    {
      "name": "testPolymorphismB",
      "expression": "Observation.valueQuantity.unit",
      "result": "lbs",
      "expected": [
        "lbs"
      ],
      "success": true,
      "executionTimeMs": 0.902666,
      "error": null
    },
    {
      "name": "testPolymorphismIsA1",
      "expression": "Observation.value.is(Quantity)",
      "result": [
        "is",
        [
          null,
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.377166,
      "error": null
    },
    {
      "name": "testPolymorphismIsA2",
      "expression": "Observation.value is Quantity",
      "result": [
        null,
        [
          [
            "Quantity"
          ]
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.295625,
      "error": null
    },
    {
      "name": "testPolymorphismIsA3",
      "expression": "Observation.issued is instant",
      "result": [
        null,
        [
          [
            "instant"
          ]
        ]
      ],
      "expected": [],
      "success": true,
      "executionTimeMs": 1.252042,
      "error": null
    },
    {
      "name": "testPolymorphismIsB",
      "expression": "Observation.value.is(Period).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.170875,
      "error": null
    },
    {
      "name": "testPolymorphismAsA",
      "expression": "Observation.value.as(Quantity).unit",
      "result": [],
      "expected": [
        "lbs"
      ],
      "success": true,
      "executionTimeMs": 2.790042,
      "error": null
    },
    {
      "name": "testPolymorphismAsAFunction",
      "expression": "(Observation.value as Quantity).unit",
      "result": [],
      "expected": [
        "lbs"
      ],
      "success": true,
      "executionTimeMs": 1.833375,
      "error": null
    },
    {
      "name": "testPolymorphismAsB",
      "expression": "(Observation.value as Period).unit",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 1.663375,
      "error": null
    },
    {
      "name": "testPolymorphismAsBFunction",
      "expression": "Observation.value.as(Period).start",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 1.030709,
      "error": null
    },
    {
      "name": "testEquivalent1",
      "expression": "1 ~ 1",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.376625,
      "error": "f != java.lang.Long"
    },
    {
      "name": "testEquivalent2",
      "expression": "{} ~ {}",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.925875,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-eq?"
    },
    {
      "name": "testEquivalent3",
      "expression": "1 ~ {}",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 1.162458,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-eq?"
    },
    {
      "name": "testEquivalent4",
      "expression": "1 ~ 2",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 2.075541,
      "error": "f != java.lang.Long"
    },
    {
      "name": "testEquivalent5",
      "expression": "'a' ~ 'a'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.541958,
      "error": null
    },
    {
      "name": "testEquivalent6",
      "expression": "'a' ~ 'A'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.777333,
      "error": null
    },
    {
      "name": "testEquivalent7",
      "expression": "'a' ~ 'b'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.2475,
      "error": null
    },
    {
      "name": "testEquivalent8",
      "expression": "1.1 ~ 1.1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.203708,
      "error": null
    },
    {
      "name": "testEquivalent9",
      "expression": "1.1 ~ 1.2",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.845333,
      "error": null
    },
    {
      "name": "testEquivalent10",
      "expression": "1.10 ~ 1.1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.1965,
      "error": null
    },
    {
      "name": "testEquivalent11",
      "expression": "1.2 \/ 1.8 ~ 0.67",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.081583,
      "error": null
    },
    {
      "name": "testEquivalent12",
      "expression": "0 ~ 0",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.213584,
      "error": "f != java.lang.Long"
    },
    {
      "name": "testEquivalent13",
      "expression": "0.0 ~ 0",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.85725,
      "error": "f != java.lang.Long"
    },
    {
      "name": "testEquivalent14",
      "expression": "@2012-04-15 ~ @2012-04-15",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.8565,
      "error": null
    },
    {
      "name": "testEquivalent15",
      "expression": "@2012-04-15 ~ @2012-04-16",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.3145,
      "error": null
    },
    {
      "name": "testEquivalent16",
      "expression": "@2012-04-15 ~ @2012-04-15T10:00:00",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.152708,
      "error": null
    },
    {
      "name": "testEquivalent17",
      "expression": "@2012-04-15T15:30:31 ~ @2012-04-15T15:30:31.0",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.78425,
      "error": null
    },
    {
      "name": "testEquivalent18",
      "expression": "@2012-04-15T15:30:31 ~ @2012-04-15T15:30:31.1",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.772167,
      "error": null
    },
    {
      "name": "testEquivalent19",
      "expression": "name ~ name",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.793917,
      "error": null
    },
    {
      "name": "testEquivalent20",
      "expression": "name.take(2).given ~ name.take(2).first().given | name.take(2).last().given",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.726709,
      "error": null
    },
    {
      "name": "testEquivalent21",
      "expression": "name.take(2).given ~ name.take(2).last().given | name.take(2).first().given",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 5.052166,
      "error": null
    },
    {
      "name": "testEquivalent22",
      "expression": "Observation.value ~ 185 '[lb_av]'",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.237125,
      "error": null
    },
    {
      "name": "testEquivalent23",
      "expression": "(1 | 2 | 3) ~ (1 | 2 | 3)",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.435417,
      "error": null
    },
    {
      "name": "testEquivalent24",
      "expression": "(1 | 2 | 3) ~ (3 | 2 | 1)",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.05675,
      "error": null
    },
    {
      "name": "testBooleanLogicXOr1",
      "expression": "(true xor true) = false",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.945375,
      "error": null
    },
    {
      "name": "testBooleanLogicXOr2",
      "expression": "(true xor false) = true",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.627334,
      "error": null
    },
    {
      "name": "testBooleanLogicXOr3",
      "expression": "(true xor {}).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.631667,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-xor"
    },
    {
      "name": "testBooleanLogicXOr4",
      "expression": "(false xor true) = true",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.678333,
      "error": null
    },
    {
      "name": "testBooleanLogicXOr5",
      "expression": "(false xor false) = false",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.818292,
      "error": null
    },
    {
      "name": "testBooleanLogicXOr6",
      "expression": "(false xor {}).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.941292,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-xor"
    },
    {
      "name": "testBooleanLogicXOr7",
      "expression": "({} xor true).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.394916,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-xor"
    },
    {
      "name": "testBooleanLogicXOr8",
      "expression": "({} xor false).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.853375,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-xor"
    },
    {
      "name": "testBooleanLogicXOr9",
      "expression": "({} xor {}).empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.799,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-xor"
    },
    {
      "name": "testSqrt1",
      "expression": "81.sqrt() = 9.0",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.131583,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSqrt2",
      "expression": "(-1).sqrt()",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.396959,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSqrtEmpty",
      "expression": "{}.sqrt().empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.323916,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testRepeat1",
      "expression": "ValueSet.expansion.repeat(contains).count() = 10",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.04925,
      "error": null
    },
    {
      "name": "testRepeat2",
      "expression": "Questionnaire.repeat(item).code.count() = 11",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.098292,
      "error": null
    },
    {
      "name": "testRepeat3",
      "expression": "Questionnaire.descendants().code.count() = 23",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.685458,
      "error": null
    },
    {
      "name": "testRepeat4",
      "expression": "Questionnaire.children().code.count() = 2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.188,
      "error": null
    },
    {
      "name": "testRepeat5",
      "expression": "Patient.name.repeat('test')",
      "result": [
        "test",
        "test",
        "test"
      ],
      "expected": [
        "test"
      ],
      "success": true,
      "executionTimeMs": 0.979083,
      "error": null
    },
    {
      "name": "testToChars1",
      "expression": "'t2'.toChars() = 't' | '2'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.720583,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testReplaceMatches1",
      "expression": "'123456'.replaceMatches('234', 'X')",
      "result": "1X56",
      "expected": [
        "1X56"
      ],
      "success": true,
      "executionTimeMs": 1.299958,
      "error": null
    },
    {
      "name": "testReplaceMatches2",
      "expression": "'abc'.replaceMatches('', 'x')",
      "result": "xaxbxcx",
      "expected": [
        "abc"
      ],
      "success": true,
      "executionTimeMs": 1.02175,
      "error": null
    },
    {
      "name": "testReplaceMatches3",
      "expression": "'123456'.replaceMatches('234', '')",
      "result": "156",
      "expected": [
        "156"
      ],
      "success": true,
      "executionTimeMs": 0.788167,
      "error": null
    },
    {
      "name": "testReplaceMatches4",
      "expression": "{}.replaceMatches('234', 'X').empty() = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.798958,
      "error": "Wrong number of args (2) passed to: fhirpath.core\/fp-replaceMatches-fn"
    },
    {
      "name": "testReplaceMatches5",
      "expression": "'123'.replaceMatches({}, 'X').empty() = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.692708,
      "error": "Wrong number of args (2) passed to: fhirpath.core\/fp-replaceMatches-fn"
    },
    {
      "name": "testReplaceMatches6",
      "expression": "'123'.replaceMatches('2', {}).empty() = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.653542,
      "error": "Wrong number of args (2) passed to: fhirpath.core\/fp-replaceMatches-fn"
    },
    {
      "name": "testReplaceMatches7",
      "expression": "'abc123'.replaceMatches('[0-9]', '-')",
      "result": "abc---",
      "expected": [
        "abc---"
      ],
      "success": true,
      "executionTimeMs": 0.612792,
      "error": null
    },
    {
      "name": "testIif1",
      "expression": "iif(Patient.name.exists(), 'named', 'unnamed') = 'named'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.313167,
      "error": null
    },
    {
      "name": "testIif2",
      "expression": "iif(Patient.name.empty(), 'unnamed', 'named') = 'named'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.318959,
      "error": null
    },
    {
      "name": "testIif3",
      "expression": "iif(true, true, (1 | 2).toString())",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 5.669875,
      "error": null
    },
    {
      "name": "testIif4",
      "expression": "iif(false, (1 | 2).toString(), true)",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.478666,
      "error": null
    },
    {
      "name": "testIif5",
      "expression": "iif(false, 'true-result').empty()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.050625,
      "error": null
    },
    {
      "name": "testIif6",
      "expression": "iif('non boolean criteria', 'true-result', 'true-result')",
      "result": "true-result",
      "expected": [],
      "success": true,
      "executionTimeMs": 0.93875,
      "error": null
    },
    {
      "name": "testIif7",
      "expression": "{}.iif(true, 'true-result', 'false-result')",
      "result": "false-result",
      "expected": [
        "true-result"
      ],
      "success": true,
      "executionTimeMs": 1.074167,
      "error": null
    },
    {
      "name": "testIif8",
      "expression": "('item').iif(true, 'true-result', 'false-result')",
      "result": "true-result",
      "expected": [
        "true-result"
      ],
      "success": true,
      "executionTimeMs": 1.331084,
      "error": null
    },
    {
      "name": "testIif9",
      "expression": "('context').iif(true, select($this), 'false-result')",
      "result": [
        "context"
      ],
      "expected": [
        "context"
      ],
      "success": true,
      "executionTimeMs": 1.326208,
      "error": null
    },
    {
      "name": "testIif10",
      "expression": "('item1' | 'item2').iif(true, 'true-result', 'false-result')",
      "result": "true-result",
      "expected": [],
      "success": true,
      "executionTimeMs": 3.38825,
      "error": null
    },
    {
      "name": "testIif11",
      "expression": "('context').iif($this = 'context','true-result', 'false-result')",
      "result": "true-result",
      "expected": [
        "true-result"
      ],
      "success": true,
      "executionTimeMs": 1.52825,
      "error": null
    },
    {
      "name": "testEscapeHtml",
      "expression": "'\"1<2\"'.escape('html')",
      "result": null,
      "expected": [
        "&quot;1&lt;2&quot;"
      ],
      "success": false,
      "executionTimeMs": 0.917917,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testEscapeJson",
      "expression": "'\"1<2\"'.escape('json')",
      "result": null,
      "expected": [
        "\\\"1<2\\\""
      ],
      "success": false,
      "executionTimeMs": 0.443583,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testUnescapeHtml",
      "expression": "'&quot;1&lt;2&quot;'.unescape('html')",
      "result": null,
      "expected": [
        "\"1<2\""
      ],
      "success": false,
      "executionTimeMs": 0.349875,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testUnescapeJson",
      "expression": "'\\\"1<2\\\"'.unescape('json')",
      "result": null,
      "expected": [
        "\"1<2\""
      ],
      "success": false,
      "executionTimeMs": 0.348,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralTrue",
      "expression": "Patient.name.exists() = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.820125,
      "error": null
    },
    {
      "name": "testLiteralFalse",
      "expression": "Patient.name.empty() = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.708625,
      "error": null
    },
    {
      "name": "testLiteralString1",
      "expression": "Patient.name.given.first() = 'Peter'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.825458,
      "error": null
    },
    {
      "name": "testLiteralInteger1",
      "expression": "1.convertsToInteger()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.444209,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralInteger0",
      "expression": "0.convertsToInteger()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.323792,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralIntegerNegative1",
      "expression": "(-1).convertsToInteger()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.343917,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralIntegerNegative1Invalid",
      "expression": "-1.convertsToInteger()",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.535292,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralIntegerMax",
      "expression": "2147483647.convertsToInteger()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.051417,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralString2",
      "expression": "'test'.convertsToString()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.936833,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralStringEscapes",
      "expression": "'\\\\\\\/\\f\\r\\n\\t\\\"\\`\\'\\u002a'.convertsToString()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.700167,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralBooleanTrue",
      "expression": "true.convertsToBoolean()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.323709,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralBooleanFalse",
      "expression": "false.convertsToBoolean()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.2875,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralDecimal10",
      "expression": "1.0.convertsToDecimal()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.354666,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralDecimal01",
      "expression": "0.1.convertsToDecimal()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.40475,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralDecimal00",
      "expression": "0.0.convertsToDecimal()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.526709,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralDecimalNegative01",
      "expression": "(-0.1).convertsToDecimal()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.3995,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralDecimalNegative01Invalid",
      "expression": "-0.1.convertsToDecimal()",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.38675,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralDecimalMax",
      "expression": "1234567890987654321.0.convertsToDecimal()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.438083,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralDecimalStep",
      "expression": "0.00000001.convertsToDecimal()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.344084,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralDateYear",
      "expression": "@2015.is(Date)",
      "result": [
        "is",
        [
          [],
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.146417,
      "error": null
    },
    {
      "name": "testLiteralDateMonth",
      "expression": "@2015-02.is(Date)",
      "result": [
        "is",
        [
          [],
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.943209,
      "error": null
    },
    {
      "name": "testLiteralDateDay",
      "expression": "@2015-02-04.is(Date)",
      "result": [
        "is",
        [
          [],
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.950916,
      "error": null
    },
    {
      "name": "testLiteralDateTimeYear",
      "expression": "@2015T.is(DateTime)",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.456833,
      "error": null
    },
    {
      "name": "testLiteralDateTimeMonth",
      "expression": "@2015-02T.is(DateTime)",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.618916,
      "error": null
    },
    {
      "name": "testLiteralDateTimeDay",
      "expression": "@2015-02-04T.is(DateTime)",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.459084,
      "error": null
    },
    {
      "name": "testLiteralDateTimeHour",
      "expression": "@2015-02-04T14.is(DateTime)",
      "result": [
        "is",
        [
          [],
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.812791,
      "error": null
    },
    {
      "name": "testLiteralDateTimeMinute",
      "expression": "@2015-02-04T14:34.is(DateTime)",
      "result": [
        "is",
        [
          [],
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.800708,
      "error": null
    },
    {
      "name": "testLiteralDateTimeSecond",
      "expression": "@2015-02-04T14:34:28.is(DateTime)",
      "result": [
        "is",
        [
          [],
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.998167,
      "error": null
    },
    {
      "name": "testLiteralDateTimeMillisecond",
      "expression": "@2015-02-04T14:34:28.123.is(DateTime)",
      "result": [
        "is",
        [
          [],
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.9395,
      "error": null
    },
    {
      "name": "testLiteralDateTimeUTC",
      "expression": "@2015-02-04T14:34:28Z.is(DateTime)",
      "result": [
        "is",
        [
          [],
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.8345,
      "error": null
    },
    {
      "name": "testLiteralDateTimeTimezoneOffset",
      "expression": "@2015-02-04T14:34:28+10:00.is(DateTime)",
      "result": [
        "is",
        [
          [],
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.835208,
      "error": null
    },
    {
      "name": "testLiteralTimeHour",
      "expression": "@T14.is(Time)",
      "result": [
        "is",
        [
          [],
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.839167,
      "error": null
    },
    {
      "name": "testLiteralTimeMinute",
      "expression": "@T14:34.is(Time)",
      "result": [
        "is",
        [
          [],
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.83225,
      "error": null
    },
    {
      "name": "testLiteralTimeSecond",
      "expression": "@T14:34:28.is(Time)",
      "result": [
        "is",
        [
          [],
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.740541,
      "error": null
    },
    {
      "name": "testLiteralTimeMillisecond",
      "expression": "@T14:34:28.123.is(Time)",
      "result": [
        "is",
        [
          [],
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.790958,
      "error": null
    },
    {
      "name": "testLiteralTimeUTC",
      "expression": "@T14:34:28Z.is(Time)",
      "result": [
        "is",
        [
          [],
          null
        ]
      ],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.908958,
      "error": null
    },
    {
      "name": "testLiteralTimeTimezoneOffset",
      "expression": "@T14:34:28+10:00.is(Time)",
      "result": [
        "is",
        [
          [],
          null
        ]
      ],
      "expected": [],
      "success": true,
      "executionTimeMs": 1.102583,
      "error": null
    },
    {
      "name": "testLiteralQuantityDecimal",
      "expression": "10.1 'mg'.convertsToQuantity()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.497625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralQuantityInteger",
      "expression": "10 'mg'.convertsToQuantity()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.31125,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralQuantityDay",
      "expression": "4 days.convertsToQuantity()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.384625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLiteralIntegerNotEqual",
      "expression": "-3 != 3",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.864041,
      "error": null
    },
    {
      "name": "testLiteralIntegerEqual",
      "expression": "Patient.name.given.count() = 5",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.139625,
      "error": null
    },
    {
      "name": "testPolarityPrecedence",
      "expression": "-Patient.name.given.count() = -5",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.740167,
      "error": null
    },
    {
      "name": "testLiteralIntegerGreaterThan",
      "expression": "Patient.name.given.count() > -3",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.374667,
      "error": null
    },
    {
      "name": "testLiteralIntegerCountNotEqual",
      "expression": "Patient.name.given.count() != 0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.039333,
      "error": null
    },
    {
      "name": "testLiteralIntegerLessThanTrue",
      "expression": "1 < 2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.707458,
      "error": null
    },
    {
      "name": "testLiteralIntegerLessThanFalse",
      "expression": "1 < -2",
      "result": [
        true
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.628625,
      "error": null
    },
    {
      "name": "testLiteralIntegerLessThanPolarityTrue",
      "expression": "+1 < +2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.663042,
      "error": null
    },
    {
      "name": "testLiteralIntegerLessThanPolarityFalse",
      "expression": "-1 < 2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.633,
      "error": null
    },
    {
      "name": "testLiteralDecimalGreaterThanNonZeroTrue",
      "expression": "Observation.value.value > 180.0",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.720583,
      "error": null
    },
    {
      "name": "testLiteralDecimalGreaterThanZeroTrue",
      "expression": "Observation.value.value > 0.0",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.6485,
      "error": null
    },
    {
      "name": "testLiteralDecimalGreaterThanIntegerTrue",
      "expression": "Observation.value.value > 0",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.686834,
      "error": null
    },
    {
      "name": "testLiteralDecimalLessThanInteger",
      "expression": "Observation.value.value < 190",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.64725,
      "error": null
    },
    {
      "name": "testLiteralDecimalLessThanInvalid",
      "expression": "Observation.value.value < 'test'",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.61725,
      "error": null
    },
    {
      "name": "testDateEqual",
      "expression": "Patient.birthDate = @1974-12-25",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.609542,
      "error": null
    },
    {
      "name": "testDateNotEqual",
      "expression": "Patient.birthDate != @1974-12-25T12:34:00",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.656208,
      "error": null
    },
    {
      "name": "testDateNotEqualTimezoneOffsetBefore",
      "expression": "Patient.birthDate != @1974-12-25T12:34:00-10:00",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.639416,
      "error": null
    },
    {
      "name": "testDateNotEqualTimezoneOffsetAfter",
      "expression": "Patient.birthDate != @1974-12-25T12:34:00+10:00",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 1.179375,
      "error": null
    },
    {
      "name": "testDateNotEqualUTC",
      "expression": "Patient.birthDate != @1974-12-25T12:34:00Z",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 1.2715,
      "error": null
    },
    {
      "name": "testDateNotEqualTimeSecond",
      "expression": "Patient.birthDate != @T12:14:15",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.147167,
      "error": null
    },
    {
      "name": "testDateNotEqualTimeMinute",
      "expression": "Patient.birthDate != @T12:14",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.677792,
      "error": null
    },
    {
      "name": "testDateNotEqualToday",
      "expression": "Patient.birthDate < today()",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.62175,
      "error": null
    },
    {
      "name": "testDateTimeGreaterThanDate1",
      "expression": "now() > Patient.birthDate",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.849,
      "error": null
    },
    {
      "name": "testDateGreaterThanDate",
      "expression": "today() > Patient.birthDate",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.733167,
      "error": null
    },
    {
      "name": "testDateTimeGreaterThanDate2",
      "expression": "now() > today()",
      "result": [
        true
      ],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.60725,
      "error": null
    },
    {
      "name": "testLiteralDateTimeTZGreater",
      "expression": "@2017-11-05T01:30:00.0-04:00 > @2017-11-05T01:15:00.0-05:00",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.446041,
      "error": null
    },
    {
      "name": "testLiteralDateTimeTZLess",
      "expression": "@2017-11-05T01:30:00.0-04:00 < @2017-11-05T01:15:00.0-05:00",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.417625,
      "error": null
    },
    {
      "name": "testLiteralDateTimeTZEqualFalse",
      "expression": "@2017-11-05T01:30:00.0-04:00 = @2017-11-05T01:15:00.0-05:00",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.420417,
      "error": null
    },
    {
      "name": "testLiteralDateTimeTZEqualTrue",
      "expression": "@2017-11-05T01:30:00.0-04:00 = @2017-11-05T00:30:00.0-05:00",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.414,
      "error": null
    },
    {
      "name": "testLiteralUnicode",
      "expression": "Patient.name.given.first() = 'P\\u0065ter'",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.704333,
      "error": null
    },
    {
      "name": "testCollectionNotEmpty",
      "expression": "Patient.name.given.empty().not()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.662833,
      "error": null
    },
    {
      "name": "testCollectionNotEqualEmpty",
      "expression": "Patient.name.given != {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.555125,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-not-eq"
    },
    {
      "name": "testExpressions",
      "expression": "Patient.name.select(given | family).distinct()",
      "result": [
        "Peter",
        "James",
        "Chalmers",
        "Jim",
        "Windsor"
      ],
      "expected": [
        "Peter",
        "James",
        "Chalmers",
        "Jim",
        "Windsor"
      ],
      "success": true,
      "executionTimeMs": 0.818375,
      "error": null
    },
    {
      "name": "testExpressionsEqual",
      "expression": "Patient.name.given.count() = 1 + 4",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.933333,
      "error": null
    },
    {
      "name": "testNotEmpty",
      "expression": "Patient.name.empty().not()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.599334,
      "error": null
    },
    {
      "name": "testEmpty",
      "expression": "Patient.link.empty()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.492666,
      "error": null
    },
    {
      "name": "testLiteralNotOnEmpty",
      "expression": "{}.not().empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.715667,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-not-fn"
    },
    {
      "name": "testLiteralNotTrue",
      "expression": "true.not() = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.66625,
      "error": null
    },
    {
      "name": "testLiteralNotFalse",
      "expression": "false.not() = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.525917,
      "error": null
    },
    {
      "name": "testIntegerBooleanNotTrue",
      "expression": "(0).not() = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.689667,
      "error": null
    },
    {
      "name": "testIntegerBooleanNotFalse",
      "expression": "(1).not() = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.622958,
      "error": null
    },
    {
      "name": "testNotInvalid",
      "expression": "(1|2).not() = false",
      "result": [
        true
      ],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.82975,
      "error": null
    },
    {
      "name": "testSuperSetOf1",
      "expression": "Patient.name.first().supersetOf($this.name).not()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.809292,
      "error": null
    },
    {
      "name": "testSuperSetOf2",
      "expression": "Patient.name.supersetOf($this.name.first())",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.97175,
      "error": null
    },
    {
      "name": "testSplit1",
      "expression": "'Peter,James,Jim,Peter,James'.split(',').count() = 5",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.585583,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSplit2",
      "expression": "'A,,C'.split(',').join(',') = 'A,,C'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.45175,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSplit3",
      "expression": "'[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]'.split('[stop]').trace('n').count() = 9",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.836208,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSplit4",
      "expression": "'[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]'.split('[stop]').join('[stop]')",
      "result": null,
      "expected": [
        "[stop]ONE[stop][stop]TWO[stop][stop][stop]THREE[stop][stop]"
      ],
      "success": false,
      "executionTimeMs": 0.676917,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testEndsWith1",
      "expression": "'12345'.endsWith('2') = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.135375,
      "error": null
    },
    {
      "name": "testEndsWith2",
      "expression": "'12345'.endsWith('5') = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.213166,
      "error": null
    },
    {
      "name": "testEndsWith3",
      "expression": "'12345'.endsWith('45') = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.174,
      "error": null
    },
    {
      "name": "testEndsWith4",
      "expression": "'12345'.endsWith('35') = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.495625,
      "error": null
    },
    {
      "name": "testEndsWith5",
      "expression": "'12345'.endsWith('12345') = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.070667,
      "error": null
    },
    {
      "name": "testEndsWith6",
      "expression": "'12345'.endsWith('012345') = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.674167,
      "error": null
    },
    {
      "name": "testEndsWith7",
      "expression": "'12345'.endsWith('') = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.05525,
      "error": null
    },
    {
      "name": "testEndsWith8",
      "expression": "{}.endsWith('1').empty() = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.732625,
      "error": null
    },
    {
      "name": "testEndsWith9",
      "expression": "{}.endsWith('').empty() = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.661417,
      "error": null
    },
    {
      "name": "testEndsWith10",
      "expression": "'123456789'.endsWith(length().toString())",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.603416,
      "error": null
    },
    {
      "name": "testEndsWithNonString1",
      "expression": "Appointment.identifier.endsWith('rand')",
      "result": null,
      "expected": [],
      "success": true,
      "executionTimeMs": 0.579333,
      "error": null
    },
    {
      "name": "testIndex",
      "expression": "Patient.telecom.select(iif(value='(03) 3410 5613', $index, {} ))",
      "result": [],
      "expected": [
        2
      ],
      "success": true,
      "executionTimeMs": 1.373167,
      "error": null
    },
    {
      "name": "testNow1",
      "expression": "Patient.birthDate < now()",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.707459,
      "error": null
    },
    {
      "name": "testNow2",
      "expression": "now().toString().length() > 10",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.86,
      "error": null
    },
    {
      "name": "testRound1",
      "expression": "1.round() = 1",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.44975,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testRound2",
      "expression": "3.14159.round(3) = 3.142",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.487625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testRoundEmpty",
      "expression": "{}.round().empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.327958,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testPolymorphicsA",
      "expression": "Observation.value.exists()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.61025,
      "error": null
    },
    {
      "name": "testPolymorphicsB",
      "expression": "Observation.valueQuantity.exists()",
      "result": true,
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.53925,
      "error": null
    },
    {
      "name": "testDollarThis1",
      "expression": "Patient.name.given.where(substring($this.length()-3) = 'out')",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 1.075917,
      "error": null
    },
    {
      "name": "testDollarThis2",
      "expression": "Patient.name.given.where(substring($this.length()-3) = 'ter')",
      "result": [
        "Peter",
        "Peter"
      ],
      "expected": [
        "Peter",
        "Peter"
      ],
      "success": true,
      "executionTimeMs": 1.124833,
      "error": null
    },
    {
      "name": "testDollarOrderAllowed",
      "expression": "Patient.name.skip(1).given",
      "result": [
        "Jim",
        "Peter",
        "James"
      ],
      "expected": [
        "Jim",
        "Peter",
        "James"
      ],
      "success": true,
      "executionTimeMs": 0.731875,
      "error": null
    },
    {
      "name": "testDollarOrderAllowedA",
      "expression": "Patient.name.skip(3).given",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.656791,
      "error": null
    },
    {
      "name": "testDollarOrderNotAllowed",
      "expression": "Patient.children().skip(1)",
      "result": [
        {
          "reference": "Organization\/1"
        },
        false,
        {
          "use": "official",
          "family": "Chalmers",
          "given": [
            "Peter",
            "James"
          ]
        },
        {
          "use": "usual",
          "given": "Jim"
        },
        {
          "use": "maiden",
          "family": "Windsor",
          "given": [
            "Peter",
            "James"
          ],
          "period": {
            "end": 2002
          }
        },
        "1974-12-25",
        "Patient",
        true,
        "example",
        {
          "use": "usual",
          "type": {
            "coding": {
              "system": "http:\/\/terminology.hl7.org\/CodeSystem\/v2-0203",
              "code": "MR"
            }
          },
          "system": "urn:oid:1.2.36.146.595.217.0.1",
          "value": 12345,
          "period": {
            "start": "2001-05-06"
          },
          "assigner": {
            "display": "Acme Healthcare"
          }
        },
        {
          "use": "home"
        },
        {
          "system": "phone",
          "value": "(03) 5555 6473",
          "use": "work",
          "rank": 1
        },
        {
          "system": "phone",
          "value": "(03) 3410 5613",
          "use": "mobile",
          "rank": 2
        },
        {
          "system": "phone",
          "value": "(03) 5555 8834",
          "use": "old",
          "period": {
            "end": 2014
          }
        },
        "male",
        {
          "relationship": {
            "coding": {
              "system": "http:\/\/terminology.hl7.org\/CodeSystem\/v2-0131",
              "code": "N"
            }
          },
          "name": {
            "family": "du March\u00e9",
            "given": "B\u00e9n\u00e9dicte"
          },
          "telecom": {
            "system": "phone",
            "value": "+33 (237) 998327"
          },
          "address": {
            "use": "home",
            "type": "both",
            "line": "534 Erewhon St",
            "city": "PleasantVille",
            "district": "Rainbow",
            "state": "Vic",
            "postalCode": 3999,
            "period": {
              "start": "1974-12-25"
            }
          },
          "gender": "female",
          "period": {
            "start": 2012
          }
        },
        {
          "status": "generated",
          "div": {
            "table": {
              "tbody": {
                "tr": [
                  {
                    "td": [
                      "Name",
                      {
                        "b": "Chalmers"
                      }
                    ]
                  },
                  {
                    "td": [
                      "Address",
                      "534 Erewhon, Pleasantville, Vic, 3999"
                    ]
                  },
                  {
                    "td": [
                      "Contacts",
                      "Home: unknown. Work: (03) 5555 6473"
                    ]
                  },
                  {
                    "td": [
                      "Id",
                      "MRN: 12345 (Acme Healthcare)"
                    ]
                  }
                ]
              }
            }
          }
        }
      ],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.626792,
      "error": null
    },
    {
      "name": "testMatchesCaseSensitive1",
      "expression": "'FHIR'.matches('FHIR')",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.778083,
      "error": null
    },
    {
      "name": "testMatchesCaseSensitive2",
      "expression": "'FHIR'.matches('fhir')",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.943666,
      "error": null
    },
    {
      "name": "testMatchesEmpty",
      "expression": "'FHIR'.matches({}).empty() = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.815542,
      "error": null
    },
    {
      "name": "testMatchesEmpty2",
      "expression": "{}.matches('FHIR').empty() = true",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.86275,
      "error": null
    },
    {
      "name": "testMatchesEmpty3",
      "expression": "{}.matches({}).empty() = true",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.9205,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-matches-fn"
    },
    {
      "name": "testMatchesSingleLineMode1",
      "expression": "'A\n\t\t\tB'.matches('A.*B')",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.839416,
      "error": null
    },
    {
      "name": "testMatchesWithinUrl1",
      "expression": "'http:\/\/fhir.org\/guides\/cqf\/common\/Library\/FHIR-ModelInfo|4.0.1'.matches('library')",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.562625,
      "error": null
    },
    {
      "name": "testMatchesWithinUrl2",
      "expression": "'http:\/\/fhir.org\/guides\/cqf\/common\/Library\/FHIR-ModelInfo|4.0.1'.matches('Library')",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.499083,
      "error": null
    },
    {
      "name": "testMatchesWithinUrl3",
      "expression": "'http:\/\/fhir.org\/guides\/cqf\/common\/Library\/FHIR-ModelInfo|4.0.1'.matches('^Library$')",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.548791,
      "error": null
    },
    {
      "name": "testMatchesWithinUrl1a",
      "expression": "'http:\/\/fhir.org\/guides\/cqf\/common\/Library\/FHIR-ModelInfo|4.0.1'.matches('.*Library.*')",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.539084,
      "error": null
    },
    {
      "name": "testMatchesWithinUrl4",
      "expression": "'http:\/\/fhir.org\/guides\/cqf\/common\/Library\/FHIR-ModelInfo|4.0.1'.matches('Measure')",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.487542,
      "error": null
    },
    {
      "name": "testMatchesFullWithinUrl1",
      "expression": "'http:\/\/fhir.org\/guides\/cqf\/common\/Library\/FHIR-ModelInfo|4.0.1'.matchesFull('library')",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 0.363625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testMatchesFullWithinUrl3",
      "expression": "'http:\/\/fhir.org\/guides\/cqf\/common\/Library\/FHIR-ModelInfo|4.0.1'.matchesFull('Library')",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 0.299208,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testMatchesFullWithinUrl4",
      "expression": "'http:\/\/fhir.org\/guides\/cqf\/common\/Library\/FHIR-ModelInfo|4.0.1'.matchesFull('^Library$')",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 0.2855,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testMatchesFullWithinUrl1a",
      "expression": "'http:\/\/fhir.org\/guides\/cqf\/common\/Library\/FHIR-ModelInfo|4.0.1'.matchesFull('.*Library.*')",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.604125,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testMatchesFullWithinUrl2",
      "expression": "'http:\/\/fhir.org\/guides\/cqf\/common\/Library\/FHIR-ModelInfo|4.0.1'.matchesFull('Measure')",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 1.425,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testType1",
      "expression": "1.type().namespace = 'System'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.672084,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testType1a",
      "expression": "1.type().name = 'Integer'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.684584,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testType2",
      "expression": "'1'.type().namespace = 'System'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.472417,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testType2a",
      "expression": "'1'.type().name = 'String'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.513583,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testType3",
      "expression": "true.type().namespace = 'System'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.877208,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testType4",
      "expression": "true.type().name = 'Boolean'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.376458,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testType5",
      "expression": "true.is(Boolean)",
      "result": [
        "is",
        [
          true,
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.824209,
      "error": null
    },
    {
      "name": "testType6",
      "expression": "true.is(System.Boolean)",
      "result": [
        "is",
        [
          true,
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.926208,
      "error": null
    },
    {
      "name": "testType7",
      "expression": "true is Boolean",
      "result": [
        true,
        [
          [
            "Boolean"
          ]
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.663417,
      "error": null
    },
    {
      "name": "testType8",
      "expression": "true is System.Boolean",
      "result": [
        true,
        [
          [
            "System",
            "Boolean"
          ]
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.511083,
      "error": null
    },
    {
      "name": "testType9",
      "expression": "Patient.active.type().namespace = 'FHIR'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.687,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testType10",
      "expression": "Patient.active.type().name = 'boolean'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.537458,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testType11",
      "expression": "Patient.active.is(boolean)",
      "result": [
        "is",
        [
          true,
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.146459,
      "error": null
    },
    {
      "name": "testType12",
      "expression": "Patient.active.is(Boolean).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.687458,
      "error": null
    },
    {
      "name": "testType13",
      "expression": "Patient.active.is(FHIR.boolean)",
      "result": [
        "is",
        [
          true,
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.587875,
      "error": null
    },
    {
      "name": "testType14",
      "expression": "Patient.active.is(System.Boolean).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.239542,
      "error": null
    },
    {
      "name": "testType15",
      "expression": "Patient.type().namespace = 'FHIR'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.038958,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testType16",
      "expression": "Patient.type().name = 'Patient'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.640917,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testType17",
      "expression": "Patient.is(Patient)",
      "result": [
        "is",
        [
          {
            "deceasedBoolean": false,
            "managingOrganization": {
              "reference": "Organization\/1"
            },
            "id": "example",
            "gender": "male",
            "name": [
              {
                "use": "official",
                "family": "Chalmers",
                "given": [
                  "Peter",
                  "James"
                ]
              },
              {
                "use": "usual",
                "given": "Jim"
              },
              {
                "use": "maiden",
                "family": "Windsor",
                "given": [
                  "Peter",
                  "James"
                ],
                "period": {
                  "end": 2002
                }
              }
            ],
            "address": {
              "city": "PleasantVille",
              "district": "Rainbow",
              "postalCode": 3999,
              "text": "534 Erewhon St PeasantVille, Rainbow, Vic  3999",
              "line": "534 Erewhon St",
              "type": "both",
              "state": "Vic",
              "period": {
                "start": "1974-12-25"
              },
              "use": "home"
            },
            "text": {
              "status": "generated",
              "div": {
                "table": {
                  "tbody": {
                    "tr": [
                      {
                        "td": [
                          "Name",
                          {
                            "b": "Chalmers"
                          }
                        ]
                      },
                      {
                        "td": [
                          "Address",
                          "534 Erewhon, Pleasantville, Vic, 3999"
                        ]
                      },
                      {
                        "td": [
                          "Contacts",
                          "Home: unknown. Work: (03) 5555 6473"
                        ]
                      },
                      {
                        "td": [
                          "Id",
                          "MRN: 12345 (Acme Healthcare)"
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "identifier": {
              "use": "usual",
              "type": {
                "coding": {
                  "system": "http:\/\/terminology.hl7.org\/CodeSystem\/v2-0203",
                  "code": "MR"
                }
              },
              "system": "urn:oid:1.2.36.146.595.217.0.1",
              "value": 12345,
              "period": {
                "start": "2001-05-06"
              },
              "assigner": {
                "display": "Acme Healthcare"
              }
            },
            "birthDate": "1974-12-25",
            "telecom": [
              {
                "use": "home"
              },
              {
                "system": "phone",
                "value": "(03) 5555 6473",
                "use": "work",
                "rank": 1
              },
              {
                "system": "phone",
                "value": "(03) 3410 5613",
                "use": "mobile",
                "rank": 2
              },
              {
                "system": "phone",
                "value": "(03) 5555 8834",
                "use": "old",
                "period": {
                  "end": 2014
                }
              }
            ],
            "active": true,
            "resourceType": "Patient",
            "contact": {
              "relationship": {
                "coding": {
                  "system": "http:\/\/terminology.hl7.org\/CodeSystem\/v2-0131",
                  "code": "N"
                }
              },
              "name": {
                "family": "du March\u00e9",
                "given": "B\u00e9n\u00e9dicte"
              },
              "telecom": {
                "system": "phone",
                "value": "+33 (237) 998327"
              },
              "address": {
                "use": "home",
                "type": "both",
                "line": "534 Erewhon St",
                "city": "PleasantVille",
                "district": "Rainbow",
                "state": "Vic",
                "postalCode": 3999,
                "period": {
                  "start": "1974-12-25"
                }
              },
              "gender": "female",
              "period": {
                "start": 2012
              }
            }
          },
          {
            "deceasedBoolean": false,
            "managingOrganization": {
              "reference": "Organization\/1"
            },
            "id": "example",
            "gender": "male",
            "name": [
              {
                "use": "official",
                "family": "Chalmers",
                "given": [
                  "Peter",
                  "James"
                ]
              },
              {
                "use": "usual",
                "given": "Jim"
              },
              {
                "use": "maiden",
                "family": "Windsor",
                "given": [
                  "Peter",
                  "James"
                ],
                "period": {
                  "end": 2002
                }
              }
            ],
            "address": {
              "city": "PleasantVille",
              "district": "Rainbow",
              "postalCode": 3999,
              "text": "534 Erewhon St PeasantVille, Rainbow, Vic  3999",
              "line": "534 Erewhon St",
              "type": "both",
              "state": "Vic",
              "period": {
                "start": "1974-12-25"
              },
              "use": "home"
            },
            "text": {
              "status": "generated",
              "div": {
                "table": {
                  "tbody": {
                    "tr": [
                      {
                        "td": [
                          "Name",
                          {
                            "b": "Chalmers"
                          }
                        ]
                      },
                      {
                        "td": [
                          "Address",
                          "534 Erewhon, Pleasantville, Vic, 3999"
                        ]
                      },
                      {
                        "td": [
                          "Contacts",
                          "Home: unknown. Work: (03) 5555 6473"
                        ]
                      },
                      {
                        "td": [
                          "Id",
                          "MRN: 12345 (Acme Healthcare)"
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "identifier": {
              "use": "usual",
              "type": {
                "coding": {
                  "system": "http:\/\/terminology.hl7.org\/CodeSystem\/v2-0203",
                  "code": "MR"
                }
              },
              "system": "urn:oid:1.2.36.146.595.217.0.1",
              "value": 12345,
              "period": {
                "start": "2001-05-06"
              },
              "assigner": {
                "display": "Acme Healthcare"
              }
            },
            "birthDate": "1974-12-25",
            "telecom": [
              {
                "use": "home"
              },
              {
                "system": "phone",
                "value": "(03) 5555 6473",
                "use": "work",
                "rank": 1
              },
              {
                "system": "phone",
                "value": "(03) 3410 5613",
                "use": "mobile",
                "rank": 2
              },
              {
                "system": "phone",
                "value": "(03) 5555 8834",
                "use": "old",
                "period": {
                  "end": 2014
                }
              }
            ],
            "active": true,
            "resourceType": "Patient",
            "contact": {
              "relationship": {
                "coding": {
                  "system": "http:\/\/terminology.hl7.org\/CodeSystem\/v2-0131",
                  "code": "N"
                }
              },
              "name": {
                "family": "du March\u00e9",
                "given": "B\u00e9n\u00e9dicte"
              },
              "telecom": {
                "system": "phone",
                "value": "+33 (237) 998327"
              },
              "address": {
                "use": "home",
                "type": "both",
                "line": "534 Erewhon St",
                "city": "PleasantVille",
                "district": "Rainbow",
                "state": "Vic",
                "postalCode": 3999,
                "period": {
                  "start": "1974-12-25"
                }
              },
              "gender": "female",
              "period": {
                "start": 2012
              }
            }
          }
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 6.111292,
      "error": null
    },
    {
      "name": "testType18",
      "expression": "Patient.is(FHIR.Patient)",
      "result": [
        "is",
        [
          {
            "deceasedBoolean": false,
            "managingOrganization": {
              "reference": "Organization\/1"
            },
            "id": "example",
            "gender": "male",
            "name": [
              {
                "use": "official",
                "family": "Chalmers",
                "given": [
                  "Peter",
                  "James"
                ]
              },
              {
                "use": "usual",
                "given": "Jim"
              },
              {
                "use": "maiden",
                "family": "Windsor",
                "given": [
                  "Peter",
                  "James"
                ],
                "period": {
                  "end": 2002
                }
              }
            ],
            "address": {
              "city": "PleasantVille",
              "district": "Rainbow",
              "postalCode": 3999,
              "text": "534 Erewhon St PeasantVille, Rainbow, Vic  3999",
              "line": "534 Erewhon St",
              "type": "both",
              "state": "Vic",
              "period": {
                "start": "1974-12-25"
              },
              "use": "home"
            },
            "text": {
              "status": "generated",
              "div": {
                "table": {
                  "tbody": {
                    "tr": [
                      {
                        "td": [
                          "Name",
                          {
                            "b": "Chalmers"
                          }
                        ]
                      },
                      {
                        "td": [
                          "Address",
                          "534 Erewhon, Pleasantville, Vic, 3999"
                        ]
                      },
                      {
                        "td": [
                          "Contacts",
                          "Home: unknown. Work: (03) 5555 6473"
                        ]
                      },
                      {
                        "td": [
                          "Id",
                          "MRN: 12345 (Acme Healthcare)"
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "identifier": {
              "use": "usual",
              "type": {
                "coding": {
                  "system": "http:\/\/terminology.hl7.org\/CodeSystem\/v2-0203",
                  "code": "MR"
                }
              },
              "system": "urn:oid:1.2.36.146.595.217.0.1",
              "value": 12345,
              "period": {
                "start": "2001-05-06"
              },
              "assigner": {
                "display": "Acme Healthcare"
              }
            },
            "birthDate": "1974-12-25",
            "telecom": [
              {
                "use": "home"
              },
              {
                "system": "phone",
                "value": "(03) 5555 6473",
                "use": "work",
                "rank": 1
              },
              {
                "system": "phone",
                "value": "(03) 3410 5613",
                "use": "mobile",
                "rank": 2
              },
              {
                "system": "phone",
                "value": "(03) 5555 8834",
                "use": "old",
                "period": {
                  "end": 2014
                }
              }
            ],
            "active": true,
            "resourceType": "Patient",
            "contact": {
              "relationship": {
                "coding": {
                  "system": "http:\/\/terminology.hl7.org\/CodeSystem\/v2-0131",
                  "code": "N"
                }
              },
              "name": {
                "family": "du March\u00e9",
                "given": "B\u00e9n\u00e9dicte"
              },
              "telecom": {
                "system": "phone",
                "value": "+33 (237) 998327"
              },
              "address": {
                "use": "home",
                "type": "both",
                "line": "534 Erewhon St",
                "city": "PleasantVille",
                "district": "Rainbow",
                "state": "Vic",
                "postalCode": 3999,
                "period": {
                  "start": "1974-12-25"
                }
              },
              "gender": "female",
              "period": {
                "start": 2012
              }
            }
          },
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.013292,
      "error": null
    },
    {
      "name": "testType19",
      "expression": "Patient.is(FHIR.`Patient`)",
      "result": [
        "is",
        [
          {
            "deceasedBoolean": false,
            "managingOrganization": {
              "reference": "Organization\/1"
            },
            "id": "example",
            "gender": "male",
            "name": [
              {
                "use": "official",
                "family": "Chalmers",
                "given": [
                  "Peter",
                  "James"
                ]
              },
              {
                "use": "usual",
                "given": "Jim"
              },
              {
                "use": "maiden",
                "family": "Windsor",
                "given": [
                  "Peter",
                  "James"
                ],
                "period": {
                  "end": 2002
                }
              }
            ],
            "address": {
              "city": "PleasantVille",
              "district": "Rainbow",
              "postalCode": 3999,
              "text": "534 Erewhon St PeasantVille, Rainbow, Vic  3999",
              "line": "534 Erewhon St",
              "type": "both",
              "state": "Vic",
              "period": {
                "start": "1974-12-25"
              },
              "use": "home"
            },
            "text": {
              "status": "generated",
              "div": {
                "table": {
                  "tbody": {
                    "tr": [
                      {
                        "td": [
                          "Name",
                          {
                            "b": "Chalmers"
                          }
                        ]
                      },
                      {
                        "td": [
                          "Address",
                          "534 Erewhon, Pleasantville, Vic, 3999"
                        ]
                      },
                      {
                        "td": [
                          "Contacts",
                          "Home: unknown. Work: (03) 5555 6473"
                        ]
                      },
                      {
                        "td": [
                          "Id",
                          "MRN: 12345 (Acme Healthcare)"
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "identifier": {
              "use": "usual",
              "type": {
                "coding": {
                  "system": "http:\/\/terminology.hl7.org\/CodeSystem\/v2-0203",
                  "code": "MR"
                }
              },
              "system": "urn:oid:1.2.36.146.595.217.0.1",
              "value": 12345,
              "period": {
                "start": "2001-05-06"
              },
              "assigner": {
                "display": "Acme Healthcare"
              }
            },
            "birthDate": "1974-12-25",
            "telecom": [
              {
                "use": "home"
              },
              {
                "system": "phone",
                "value": "(03) 5555 6473",
                "use": "work",
                "rank": 1
              },
              {
                "system": "phone",
                "value": "(03) 3410 5613",
                "use": "mobile",
                "rank": 2
              },
              {
                "system": "phone",
                "value": "(03) 5555 8834",
                "use": "old",
                "period": {
                  "end": 2014
                }
              }
            ],
            "active": true,
            "resourceType": "Patient",
            "contact": {
              "relationship": {
                "coding": {
                  "system": "http:\/\/terminology.hl7.org\/CodeSystem\/v2-0131",
                  "code": "N"
                }
              },
              "name": {
                "family": "du March\u00e9",
                "given": "B\u00e9n\u00e9dicte"
              },
              "telecom": {
                "system": "phone",
                "value": "+33 (237) 998327"
              },
              "address": {
                "use": "home",
                "type": "both",
                "line": "534 Erewhon St",
                "city": "PleasantVille",
                "district": "Rainbow",
                "state": "Vic",
                "postalCode": 3999,
                "period": {
                  "start": "1974-12-25"
                }
              },
              "gender": "female",
              "period": {
                "start": 2012
              }
            }
          },
          null
        ]
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.283292,
      "error": null
    },
    {
      "name": "testType20",
      "expression": "Patient.ofType(Patient).type().name",
      "result": null,
      "expected": [
        "Patient"
      ],
      "success": false,
      "executionTimeMs": 0.847333,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testType21",
      "expression": "Patient.ofType(FHIR.Patient).type().name",
      "result": null,
      "expected": [
        "Patient"
      ],
      "success": false,
      "executionTimeMs": 0.768375,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testType22",
      "expression": "Patient.is(System.Patient).not()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.930834,
      "error": null
    },
    {
      "name": "testType23",
      "expression": "Patient.ofType(FHIR.`Patient`).type().name",
      "result": null,
      "expected": [
        "Patient"
      ],
      "success": false,
      "executionTimeMs": 1.432333,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testIndexer1",
      "expression": "Patient.name[0].given = 'Peter' | 'James'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 3.388125,
      "error": null
    },
    {
      "name": "testIndexer2",
      "expression": "Patient.name[1].given = 'Jim'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.821375,
      "error": null
    },
    {
      "name": "testTake1",
      "expression": "(0 | 1 | 2).take(1) = 0",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.8465,
      "error": null
    },
    {
      "name": "testTake2",
      "expression": "(0 | 1 | 2).take(2) = 0 | 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.454834,
      "error": null
    },
    {
      "name": "testTake3",
      "expression": "Patient.name.take(1).given = 'Peter' | 'James'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.516875,
      "error": null
    },
    {
      "name": "testTake4",
      "expression": "Patient.name.take(2).given = 'Peter' | 'James' | 'Jim'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 5.659291,
      "error": null
    },
    {
      "name": "testTake5",
      "expression": "Patient.name.take(3).given.count() = 5",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.464208,
      "error": null
    },
    {
      "name": "testTake6",
      "expression": "Patient.name.take(4).given.count() = 5",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.582083,
      "error": null
    },
    {
      "name": "testTake7",
      "expression": "Patient.name.take(0).given.exists() = false",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.333041,
      "error": null
    },
    {
      "name": "testExclude1",
      "expression": "(1 | 2 | 3).exclude(2 | 4) = 1 | 3",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.700542,
      "error": null
    },
    {
      "name": "testExclude2",
      "expression": "(1 | 2).exclude(4) = 1 | 2",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.195209,
      "error": null
    },
    {
      "name": "testExclude3",
      "expression": "(1 | 2).exclude({}) = 1 | 2",
      "result": [
        false
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.057875,
      "error": null
    },
    {
      "name": "testExclude4",
      "expression": "1.combine(1).exclude(2).count() = 2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.862291,
      "error": null
    },
    {
      "name": "testExtractBirthDate",
      "expression": "birthDate",
      "result": "1974-12-25",
      "expected": [
        "@1974-12-25"
      ],
      "success": true,
      "executionTimeMs": 0.577042,
      "error": null
    },
    {
      "name": "testPatientHasBirthDate",
      "expression": "birthDate",
      "result": "1974-12-25",
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.386083,
      "error": null
    },
    {
      "name": "testPatientTelecomTypes",
      "expression": "telecom.use",
      "result": [
        "home",
        "work",
        "mobile",
        "old"
      ],
      "expected": [
        "home",
        "work",
        "mobile",
        "old"
      ],
      "success": true,
      "executionTimeMs": 0.618625,
      "error": null
    },
    {
      "name": "testExtension1",
      "expression": "Patient.birthDate.extension('http:\/\/hl7.org\/fhir\/StructureDefinition\/patient-birthTime').exists()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.840625,
      "error": null
    },
    {
      "name": "testExtension2",
      "expression": "Patient.birthDate.extension(%`ext-patient-birthTime`).exists()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.001083,
      "error": null
    },
    {
      "name": "testExtension3",
      "expression": "Patient.birthDate.extension('http:\/\/hl7.org\/fhir\/StructureDefinition\/patient-birthTime1').empty()",
      "result": false,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.732583,
      "error": null
    },
    {
      "name": "testContainsCollection1",
      "expression": "(1 | 2 | 3) contains 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.1895,
      "error": null
    },
    {
      "name": "testContainsCollection2",
      "expression": "(2 | 3) contains 1",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.704542,
      "error": null
    },
    {
      "name": "testContainsCollection3",
      "expression": "('a' | 'c' | 'd') contains 'a'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.55975,
      "error": null
    },
    {
      "name": "testContainsCollection4",
      "expression": "('a' | 'c' | 'd') contains 'b'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.499458,
      "error": null
    },
    {
      "name": "testContainsCollectionEmpty1",
      "expression": "{} contains 1",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 0.487834,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-contains"
    },
    {
      "name": "testContainsCollectionEmpty2",
      "expression": "{} contains 'value'",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 0.463166,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-contains"
    },
    {
      "name": "testContainsCollectionEmpty3",
      "expression": "{} contains true",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 1.339375,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-contains"
    },
    {
      "name": "testContainsCollectionEmpty4",
      "expression": "{} contains {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 1.294916,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-contains"
    },
    {
      "name": "testContainsCollectionEmptyDateTime",
      "expression": "{} contains @2023-01-01",
      "result": null,
      "expected": [
        false
      ],
      "success": false,
      "executionTimeMs": 0.847875,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-contains"
    },
    {
      "name": "HighBoundaryDecimalDefault",
      "expression": "1.587.highBoundary()",
      "result": null,
      "expected": [
        1.5875
      ],
      "success": false,
      "executionTimeMs": 0.520833,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal1",
      "expression": "1.587.highBoundary(2)",
      "result": null,
      "expected": [
        1.59
      ],
      "success": false,
      "executionTimeMs": 0.36625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal2",
      "expression": "1.587.highBoundary(6)",
      "result": null,
      "expected": [
        1.5875
      ],
      "success": false,
      "executionTimeMs": 0.356208,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal3",
      "expression": "1.587.highBoundary(-1)",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.381542,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal4",
      "expression": "(-1.587).highBoundary()",
      "result": null,
      "expected": [
        -1.5865
      ],
      "success": false,
      "executionTimeMs": 0.309958,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal5",
      "expression": "(-1.587).highBoundary(2)",
      "result": null,
      "expected": [
        -1.58
      ],
      "success": false,
      "executionTimeMs": 0.366292,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal6",
      "expression": "(-1.587).highBoundary(6)",
      "result": null,
      "expected": [
        -1.5865
      ],
      "success": false,
      "executionTimeMs": 0.355542,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal7",
      "expression": "1.587.highBoundary(39)",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.364084,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal8",
      "expression": "1.highBoundary()",
      "result": null,
      "expected": [
        1.5
      ],
      "success": false,
      "executionTimeMs": 0.257,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal9",
      "expression": "1.highBoundary(0)",
      "result": null,
      "expected": [
        2
      ],
      "success": false,
      "executionTimeMs": 1.20575,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal10",
      "expression": "1.highBoundary(5)",
      "result": null,
      "expected": [
        1.5
      ],
      "success": false,
      "executionTimeMs": 0.496125,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal11",
      "expression": "12.587.highBoundary(2)",
      "result": null,
      "expected": [
        12.59
      ],
      "success": false,
      "executionTimeMs": 0.384792,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal12",
      "expression": "12.500.highBoundary(4)",
      "result": null,
      "expected": [
        12.5005
      ],
      "success": false,
      "executionTimeMs": 0.358667,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal13",
      "expression": "120.highBoundary(2)",
      "result": null,
      "expected": [
        120.5
      ],
      "success": false,
      "executionTimeMs": 0.332083,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal14",
      "expression": "-120.highBoundary(2)",
      "result": null,
      "expected": [
        -120.5
      ],
      "success": false,
      "executionTimeMs": 0.360625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal15",
      "expression": "0.0034.highBoundary(1)",
      "result": null,
      "expected": [
        0
      ],
      "success": false,
      "executionTimeMs": 0.362875,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal16",
      "expression": "-0.0034.highBoundary(1)",
      "result": null,
      "expected": [
        0
      ],
      "success": false,
      "executionTimeMs": 0.316791,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDecimal",
      "expression": "1.587.highBoundary(8)",
      "result": null,
      "expected": [
        1.5875
      ],
      "success": false,
      "executionTimeMs": 4.992375,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryQuantity",
      "expression": "1.587 'm'.highBoundary(8)",
      "result": null,
      "expected": [
        "1.58750000 'm'"
      ],
      "success": false,
      "executionTimeMs": 0.412542,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDateMonth",
      "expression": "@2014.highBoundary(6)",
      "result": null,
      "expected": [
        "@2014-12"
      ],
      "success": false,
      "executionTimeMs": 0.373125,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDateTimeMillisecond1",
      "expression": "@2014-01-01T08.highBoundary(17)",
      "result": null,
      "expected": [
        "@2014-01-01T08:00:59.999-12:00"
      ],
      "success": false,
      "executionTimeMs": 0.383583,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDateTimeMillisecond2",
      "expression": "@2014-01-01T08:05-05:00.highBoundary(17)",
      "result": null,
      "expected": [
        "@2014-01-01T08:05:59.999-05:00"
      ],
      "success": false,
      "executionTimeMs": 0.344,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryDateTimeMillisecond3",
      "expression": "@2014-01-01T08.highBoundary(17)",
      "result": null,
      "expected": [
        "@2014-01-01T08:00:59.999-12:00"
      ],
      "success": false,
      "executionTimeMs": 0.333292,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "HighBoundaryTimeMillisecond",
      "expression": "@T10:30.highBoundary(9)",
      "result": null,
      "expected": [
        "@T10:30:59.999"
      ],
      "success": false,
      "executionTimeMs": 0.368375,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testExists1",
      "expression": "Patient.name.exists()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.826125,
      "error": null
    },
    {
      "name": "testExists2",
      "expression": "Patient.name.exists(use = 'nickname')",
      "result": false,
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.673833,
      "error": null
    },
    {
      "name": "testExists3",
      "expression": "Patient.name.exists(use = 'official')",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.195709,
      "error": null
    },
    {
      "name": "testExists4",
      "expression": "Patient.maritalStatus.coding.exists(code = 'P' and system = 'http:\/\/terminology.hl7.org\/CodeSystem\/v3-MaritalStatus')\n\t\t\tor Patient.maritalStatus.coding.exists(code = 'A' and system = 'http:\/\/terminology.hl7.org\/CodeSystem\/v3-MaritalStatus')",
      "result": true,
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 1.509875,
      "error": null
    },
    {
      "name": "testExists5",
      "expression": "(1 | 2).exists()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.254291,
      "error": null
    },
    {
      "name": "testMultiply1",
      "expression": "1 * 1 = 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.907833,
      "error": null
    },
    {
      "name": "testMultiply2",
      "expression": "1 * 0 = 0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.876541,
      "error": null
    },
    {
      "name": "testMultiply3",
      "expression": "1.2 * 1.8 = 2.16",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.160459,
      "error": null
    },
    {
      "name": "testMultiplyEmpty1",
      "expression": "1 * {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.887708,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-*"
    },
    {
      "name": "testMultiplyEmpty2",
      "expression": "{} * 1",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 1.022958,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-*"
    },
    {
      "name": "testMultiplyEmpty3",
      "expression": "{} * {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.87825,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-*"
    },
    {
      "name": "testCase1",
      "expression": "'t'.upper() = 'T'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.628709,
      "error": null
    },
    {
      "name": "testCase2",
      "expression": "'t'.lower() = 't'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.49225,
      "error": null
    },
    {
      "name": "testCase3",
      "expression": "'T'.upper() = 'T'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.636333,
      "error": null
    },
    {
      "name": "testCase4",
      "expression": "'T'.lower() = 't'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.837542,
      "error": null
    },
    {
      "name": "testLessOrEqual1",
      "expression": "1 <= 2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.889125,
      "error": null
    },
    {
      "name": "testLessOrEqual2",
      "expression": "1.0 <= 1.2",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.126292,
      "error": null
    },
    {
      "name": "testLessOrEqual3",
      "expression": "'a' <= 'b'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.644167,
      "error": null
    },
    {
      "name": "testLessOrEqual4",
      "expression": "'A' <= 'a'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.561375,
      "error": null
    },
    {
      "name": "testLessOrEqual5",
      "expression": "@2014-12-12 <= @2014-12-13",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.486709,
      "error": null
    },
    {
      "name": "testLessOrEqual6",
      "expression": "@2014-12-13T12:00:00 <= @2014-12-13T12:00:01",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.434416,
      "error": null
    },
    {
      "name": "testLessOrEqual7",
      "expression": "@T12:00:00 <= @T14:00:00",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.421875,
      "error": null
    },
    {
      "name": "testLessOrEqual8",
      "expression": "1 <= 1",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.181958,
      "error": null
    },
    {
      "name": "testLessOrEqual9",
      "expression": "1.0 <= 1.0",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 2.444959,
      "error": null
    },
    {
      "name": "testLessOrEqual10",
      "expression": "'a' <= 'a'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.149916,
      "error": null
    },
    {
      "name": "testLessOrEqual11",
      "expression": "'A' <= 'A'",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.560208,
      "error": null
    },
    {
      "name": "testLessOrEqual12",
      "expression": "@2014-12-12 <= @2014-12-12",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.334458,
      "error": null
    },
    {
      "name": "testLessOrEqual13",
      "expression": "@2014-12-13T12:00:00 <= @2014-12-13T12:00:00",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.925166,
      "error": null
    },
    {
      "name": "testLessOrEqual14",
      "expression": "@T12:00:00 <= @T12:00:00",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.499542,
      "error": null
    },
    {
      "name": "testLessOrEqual15",
      "expression": "2 <= 1",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.576625,
      "error": null
    },
    {
      "name": "testLessOrEqual16",
      "expression": "1.1 <= 1.0",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.517166,
      "error": null
    },
    {
      "name": "testLessOrEqual17",
      "expression": "'b' <= 'a'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.5845,
      "error": null
    },
    {
      "name": "testLessOrEqual18",
      "expression": "'B' <= 'A'",
      "result": [
        false
      ],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.569583,
      "error": null
    },
    {
      "name": "testLessOrEqual19",
      "expression": "@2014-12-13 <= @2014-12-12",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.466875,
      "error": null
    },
    {
      "name": "testLessOrEqual20",
      "expression": "@2014-12-13T12:00:01 <= @2014-12-13T12:00:00",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.492167,
      "error": null
    },
    {
      "name": "testLessOrEqual21",
      "expression": "@T12:00:01 <= @T12:00:00",
      "result": [],
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.694083,
      "error": null
    },
    {
      "name": "testLessOrEqual22",
      "expression": "Observation.value <= 200 '[lb_av]'",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.822458,
      "error": null
    },
    {
      "name": "testLessOrEqual23",
      "expression": "@2018-03 <= @2018-03-01",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.4895,
      "error": null
    },
    {
      "name": "testLessOrEqual24",
      "expression": "@2018-03-01T10:30 <= @2018-03-01T10:30:00",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.40175,
      "error": null
    },
    {
      "name": "testLessOrEqual25",
      "expression": "@T10:30 <= @T10:30:00",
      "result": [],
      "expected": [],
      "success": true,
      "executionTimeMs": 0.431917,
      "error": null
    },
    {
      "name": "testLessOrEqual26",
      "expression": "@2018-03-01T10:30:00  <= @2018-03-01T10:30:00.0",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.608959,
      "error": null
    },
    {
      "name": "testLessOrEqual27",
      "expression": "@T10:30:00 <= @T10:30:00.0",
      "result": [],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.459584,
      "error": null
    },
    {
      "name": "testLessOrEqualEmpty1",
      "expression": "1 <= {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.509792,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-lte"
    },
    {
      "name": "testLessOrEqualEmpty2",
      "expression": "{} <= 1",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.46,
      "error": "Wrong number of args (1) passed to: fhirpath.core\/fp-lte"
    },
    {
      "name": "testLessOrEqualEmpty3",
      "expression": "{} <= {}",
      "result": null,
      "expected": [],
      "success": false,
      "executionTimeMs": 0.371042,
      "error": "Wrong number of args (0) passed to: fhirpath.core\/fp-lte"
    },
    {
      "name": "testLn1",
      "expression": "1.ln() = 0.0",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.364708,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLn2",
      "expression": "1.0.ln() = 0.0",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.908166,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testLnEmpty",
      "expression": "{}.ln().empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.652833,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSort1",
      "expression": "(1 | 2 | 3).sort() = (1 | 2 | 3)",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.024167,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSort2",
      "expression": "(3 | 2 | 1).sort() = (1 | 2 | 3)",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.772959,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSort3",
      "expression": "(1 | 2 | 3).sort($this) = (1 | 2 | 3)",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.198292,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSort4",
      "expression": "(3 | 2 | 1).sort($this) = (1 | 2 | 3)",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.253333,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSort5",
      "expression": "(1 | 2 | 3).sort(-$this) = (3 | 2 | 1)",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.251208,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSort6",
      "expression": "('a' | 'b' | 'c').sort($this) = ('a' | 'b' | 'c')",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 1.097459,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSort7",
      "expression": "('c' | 'b' | 'a').sort($this) = ('a' | 'b' | 'c')",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.960333,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSort8",
      "expression": "('a' | 'b' | 'c').sort(-$this) = ('c' | 'b' | 'a')",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.918125,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSort9",
      "expression": "Patient.name[0].given.sort() = ('James' | 'Peter')",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.874708,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSort10",
      "expression": "Patient.name.sort(-family, -given.first()).first().use = 'usual'",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.744709,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testAllTrue1",
      "expression": "Patient.name.select(given.exists()).allTrue()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.91775,
      "error": null
    },
    {
      "name": "testAllTrue2",
      "expression": "Patient.name.select(period.exists()).allTrue()",
      "result": false,
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.783167,
      "error": null
    },
    {
      "name": "testAllTrue3",
      "expression": "Patient.name.all(given.exists())",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.809583,
      "error": null
    },
    {
      "name": "testAllTrue4",
      "expression": "Patient.name.all(period.exists())",
      "result": false,
      "expected": [
        false
      ],
      "success": true,
      "executionTimeMs": 0.826833,
      "error": null
    },
    {
      "name": "PrecisionDecimal",
      "expression": "1.58700.precision()",
      "result": null,
      "expected": [
        5
      ],
      "success": false,
      "executionTimeMs": 0.465041,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "PrecisionYear",
      "expression": "@2014.precision()",
      "result": null,
      "expected": [
        4
      ],
      "success": false,
      "executionTimeMs": 0.2665,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "PrecisionDateTimeMilliseconds",
      "expression": "@2014-01-05T10:30:00.000.precision()",
      "result": null,
      "expected": [
        17
      ],
      "success": false,
      "executionTimeMs": 0.239334,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "PrecisionTimeMinutes",
      "expression": "@T10:30.precision()",
      "result": null,
      "expected": [
        4
      ],
      "success": false,
      "executionTimeMs": 0.231,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "PrecisionTimeMilliseconds",
      "expression": "@T10:30:00.000.precision()",
      "result": null,
      "expected": [
        9
      ],
      "success": false,
      "executionTimeMs": 0.238292,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "PrecisionEmpty",
      "expression": "{}.precision().empty()",
      "result": null,
      "expected": [
        true
      ],
      "success": false,
      "executionTimeMs": 0.256958,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testEncodeBase64A",
      "expression": "'test'.encode('base64')",
      "result": null,
      "expected": [
        "dGVzdA=="
      ],
      "success": false,
      "executionTimeMs": 0.2975,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testEncodeHex",
      "expression": "'test'.encode('hex')",
      "result": null,
      "expected": [
        "74657374"
      ],
      "success": false,
      "executionTimeMs": 0.254167,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testEncodeBase64B",
      "expression": "'subjects?_d'.encode('base64')",
      "result": null,
      "expected": [
        "c3ViamVjdHM\/X2Q="
      ],
      "success": false,
      "executionTimeMs": 0.264916,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testEncodeUrlBase64",
      "expression": "'subjects?_d'.encode('urlbase64')",
      "result": null,
      "expected": [
        "c3ViamVjdHM_X2Q="
      ],
      "success": false,
      "executionTimeMs": 0.249125,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testDecodeBase64A",
      "expression": "'dGVzdA=='.decode('base64')",
      "result": null,
      "expected": [
        "test"
      ],
      "success": false,
      "executionTimeMs": 0.287916,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testDecodeHex",
      "expression": "'74657374'.decode('hex')",
      "result": null,
      "expected": [
        "test"
      ],
      "success": false,
      "executionTimeMs": 0.250833,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testDecodeBase64B",
      "expression": "'c3ViamVjdHM\/X2Q='.decode('base64')",
      "result": null,
      "expected": [
        "subjects?_d"
      ],
      "success": false,
      "executionTimeMs": 0.342625,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testDecodeUrlBase64",
      "expression": "'c3ViamVjdHM_X2Q='.decode('urlbase64')",
      "result": null,
      "expected": [
        "subjects?_d"
      ],
      "success": false,
      "executionTimeMs": 0.303792,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSelect1",
      "expression": "Patient.name.select(given).count() = 5",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.379875,
      "error": null
    },
    {
      "name": "testSelect2",
      "expression": "Patient.name.select(given | family).count() = 7",
      "result": [
        true
      ],
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 1.444458,
      "error": null
    },
    {
      "name": "testSelect3",
      "expression": "name.select(use.contains('i')).count()",
      "result": 3,
      "expected": [
        3
      ],
      "success": true,
      "executionTimeMs": 1.216709,
      "error": null
    },
    {
      "name": "testJoin",
      "expression": "name.given.join(',')",
      "result": null,
      "expected": [
        "Peter,James,Jim,Peter,James"
      ],
      "success": false,
      "executionTimeMs": 0.615584,
      "error": "Syntax error compiling at (0:0)."
    },
    {
      "name": "testSingle1",
      "expression": "Patient.name.first().single().exists()",
      "result": true,
      "expected": [
        true
      ],
      "success": true,
      "executionTimeMs": 0.913083,
      "error": null
    },
    {
      "name": "testSingle2",
      "expression": "Patient.name.single().exists()",
      "result": true,
      "expected": [],
      "success": true,
      "executionTimeMs": 0.735667,
      "error": null
    }
  ],
  "summary": {
    "total": 992,
    "passed": 629,
    "failed": 363,
    "errors": 0
  }
}