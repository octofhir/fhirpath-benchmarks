{
  "language": "python",
  "timestamp": 1753200209.049987,
  "benchmarks": [
    {
      "name": "complexPathNavigation",
      "description": "Complex path navigation performance test",
      "expression": "Patient.name.where(use = 'official').given.first()",
      "iterations": 1000,
      "avg_time_ms": 0.8493163229977654,
      "min_time_ms": 0.5054169996583369,
      "max_time_ms": 31.242457999724138,
      "ops_per_second": 1177.417615701036
    },
    {
      "name": "functionChaining",
      "description": "Function chaining performance test",
      "expression": "Patient.telecom.where(system = 'phone').value.substring(0, 3)",
      "iterations": 1000,
      "avg_time_ms": 2.494426995003778,
      "min_time_ms": 1.1218750000807631,
      "max_time_ms": 78.2782500000394,
      "ops_per_second": 400.8936729769818
    },
    {
      "name": "multipleConditionsFiltering",
      "description": "Complex filtering with multiple conditions and logical operators",
      "expression": "Patient.telecom.where(system = 'phone' and use != 'old' and rank.exists()).select(value + ' (' + use + ')')",
      "iterations": 1000,
      "avg_time_ms": 1.5610196150059892,
      "min_time_ms": 1.0306670001227758,
      "max_time_ms": 23.329084000124567,
      "ops_per_second": 640.6069407373611
    },
    {
      "name": "nestedCollectionOperations",
      "description": "Nested collection operations with type checking",
      "expression": "Patient.name.where(use.exists()).count() + Patient.telecom.where(system.exists()).count()",
      "iterations": 1000,
      "avg_time_ms": 1.0658272440014116,
      "min_time_ms": 0.8372090001103061,
      "max_time_ms": 3.031708999969851,
      "ops_per_second": 938.2383548817181
    },
    {
      "name": "dateTimeComparisons",
      "description": "Complex date/time operations and comparisons",
      "expression": "Patient.telecom.where(period.end.exists()).count() + Patient.birthDate.toString().length()",
      "iterations": 1000,
      "avg_time_ms": 1.0135976440051309,
      "min_time_ms": 0.7680000003347232,
      "max_time_ms": 5.866417000106594,
      "ops_per_second": 986.5847714963098
    },
    {
      "name": "quantityOperations",
      "description": "Mathematical operations on quantities and numeric values",
      "expression": "Observation.valueQuantity.value.toString().length() + Observation.code.coding.count() * 10",
      "iterations": 1000,
      "avg_time_ms": 1.1591847910003708,
      "min_time_ms": 0.8569169999645965,
      "max_time_ms": 5.971499999759544,
      "ops_per_second": 862.6752246611215
    },
    {
      "name": "codingSystemFiltering",
      "description": "Complex filtering across multiple coding systems",
      "expression": "Observation.code.coding.where(system.contains('loinc') or system.contains('snomed')).select(code + '@' + system.split('/').last())",
      "iterations": 1000,
      "avg_time_ms": 2.0967399949936407,
      "min_time_ms": 1.2487909998526447,
      "max_time_ms": 12.88266699975793,
      "ops_per_second": 476.93085570346693
    },
    {
      "name": "hierarchicalNavigation",
      "description": "Deep hierarchical navigation with conditional logic",
      "expression": "Questionnaire.item.item.item.where(enableWhen.exists()).select(linkId + ': ' + code.coding.where(system.contains('snomed')).display.first())",
      "iterations": 1000,
      "avg_time_ms": 1.479042916999333,
      "min_time_ms": 1.2229159997332317,
      "max_time_ms": 8.111915999961639,
      "ops_per_second": 676.1129028147402
    },
    {
      "name": "recursiveItemSearch",
      "description": "Recursive search through nested questionnaire items",
      "expression": "Questionnaire.descendants().where(resourceType = 'item' and type = 'choice' and answerValueSet.exists()).linkId",
      "iterations": 1000,
      "avg_time_ms": 0.8494396940018305,
      "min_time_ms": 0.751958999899216,
      "max_time_ms": 4.739166000035766,
      "ops_per_second": 1177.2466098080001
    },
    {
      "name": "valueSetExpansionAnalysis",
      "description": "Complex analysis of ValueSet expansion hierarchy",
      "expression": "ValueSet.expansion.contains.where(abstract.exists() and abstract = true).contains.where(display.contains('Mass')).count()",
      "iterations": 1000,
      "avg_time_ms": 1.2091328899991822,
      "min_time_ms": 1.011083999856055,
      "max_time_ms": 4.617208000126993,
      "ops_per_second": 827.0389535104586
    },
    {
      "name": "stringManipulationChain",
      "description": "Complex string manipulation and pattern matching",
      "expression": "ValueSet.expansion.contains.contains.display.where(matches('.*\\[.*\\].*')).select(substring(indexOf('['), indexOf(']') - indexOf('[') + 1))",
      "iterations": 1000,
      "avg_time_ms": 1.7466902279970782,
      "min_time_ms": 1.4852499998596613,
      "max_time_ms": 9.05262500009485,
      "ops_per_second": 572.5113611854894
    },
    {
      "name": "typeConversionOperations",
      "description": "Type checking and conversion operations",
      "expression": "Patient.birthDate.toString().length() + Patient.active.toString().upper().length() + Patient.telecom.rank.where(convertsToInteger()).sum()",
      "iterations": 1000,
      "avg_time_ms": 1.2157589109988294,
      "min_time_ms": 1.0530839999773889,
      "max_time_ms": 12.291250000089349,
      "ops_per_second": 822.5314994223908
    },
    {
      "name": "aggregationFunctions",
      "description": "Complex aggregation and mathematical functions",
      "expression": "Patient.name.given.count() + Patient.telecom.where(rank.exists()).rank.sum() + Patient.address.line.count()",
      "iterations": 1000,
      "avg_time_ms": 1.3914813719957237,
      "min_time_ms": 0.9752500000104192,
      "max_time_ms": 5.128541000431142,
      "ops_per_second": 718.6585606717509
    },
    {
      "name": "conditionalExpressions",
      "description": "Complex conditional expressions with iif and boolean logic",
      "expression": "iif(Observation.valueQuantity.value > 180, 'High', iif(Observation.valueQuantity.value < 150, 'Low', 'Normal')) + ' - ' + Observation.status.upper()",
      "iterations": 1000,
      "avg_time_ms": 2.163822925003842,
      "min_time_ms": 1.6869999999471474,
      "max_time_ms": 20.816875000036816,
      "ops_per_second": 462.14502510561226
    },
    {
      "name": "crossResourceReferences",
      "description": "Complex reference handling and path resolution",
      "expression": "Observation.subject.reference.split('/').last() + '_' + Observation.encounter.reference.split('/').last() + '_' + Observation.id",
      "iterations": 1000,
      "avg_time_ms": 1.222017772001891,
      "min_time_ms": 1.0455410001668497,
      "max_time_ms": 8.059624999987136,
      "ops_per_second": 818.3187044504396
    },
    {
      "name": "errorHandlingExpressions",
      "description": "Expressions testing error handling and edge cases",
      "expression": "Patient.name.where(use = 'nonexistent').given.first().empty().not() or Patient.telecom.where(system = 'email').value.matches('.*@.*').allTrue()",
      "iterations": 1000,
      "avg_time_ms": 1.4639296819991614,
      "min_time_ms": 1.2766669997290592,
      "max_time_ms": 6.776833999992959,
      "ops_per_second": 683.0929192134331
    }
  ],
  "system_info": {
    "platform": "darwin",
    "python_version": "3.13.5 (main, Jun 11 2025, 15:36:57) [Clang 17.0.0 (clang-1700.0.13.3)]",
    "fhirpath_version": "fhirpath-py"
  }
}