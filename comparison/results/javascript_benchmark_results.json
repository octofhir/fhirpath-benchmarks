{
  "language": "javascript",
  "timestamp": 1753200289.099,
  "benchmarks": [
    {
      "name": "complexPathNavigation",
      "description": "Complex path navigation performance test",
      "expression": "Patient.name.where(use = 'official').given.first()",
      "iterations": 1000,
      "avg_time_ms": 0.2131104510000001,
      "min_time_ms": 0.120459,
      "max_time_ms": 4.393083,
      "ops_per_second": 4692.402438771056
    },
    {
      "name": "functionChaining",
      "description": "Function chaining performance test",
      "expression": "Patient.telecom.where(system = 'phone').value.substring(0, 3)",
      "iterations": 1000,
      "avg_time_ms": 0.45633691199999926,
      "min_time_ms": 0.27425,
      "max_time_ms": 5.573042,
      "ops_per_second": 2191.363384603877
    },
    {
      "name": "multipleConditionsFiltering",
      "description": "Complex filtering with multiple conditions and logical operators",
      "expression": "Patient.telecom.where(system = 'phone' and use != 'old' and rank.exists()).select(value + ' (' + use + ')')",
      "iterations": 1000,
      "avg_time_ms": 0.2682511970000003,
      "min_time_ms": 0.170208,
      "max_time_ms": 3.887417,
      "ops_per_second": 3727.8491622164092
    },
    {
      "name": "nestedCollectionOperations",
      "description": "Nested collection operations with type checking",
      "expression": "Patient.name.where(use.exists()).count() + Patient.telecom.where(system.exists()).count()",
      "iterations": 1000,
      "avg_time_ms": 0.1998823619999998,
      "min_time_ms": 0.141166,
      "max_time_ms": 3.450917,
      "ops_per_second": 5002.942680855457
    },
    {
      "name": "dateTimeComparisons",
      "description": "Complex date/time operations and comparisons",
      "expression": "Patient.telecom.where(period.end.exists()).count() + Patient.birthDate.toString().length()",
      "iterations": 1000,
      "avg_time_ms": 0.20224901399999998,
      "min_time_ms": 0.132833,
      "max_time_ms": 3.656334,
      "ops_per_second": 4944.399877272084
    },
    {
      "name": "quantityOperations",
      "description": "Mathematical operations on quantities and numeric values",
      "expression": "Observation.valueQuantity.value.toString().length() + Observation.code.coding.count() * 10",
      "iterations": 1000,
      "avg_time_ms": 0.30016216800000034,
      "min_time_ms": 0.165959,
      "max_time_ms": 5.741125,
      "ops_per_second": 3331.532440157478
    },
    {
      "name": "recursiveItemSearch",
      "description": "Recursive search through nested questionnaire items",
      "expression": "Questionnaire.descendants().where(resourceType = 'item' and type = 'choice' and answerValueSet.exists()).linkId",
      "iterations": 1000,
      "avg_time_ms": 1.0872212979999987,
      "min_time_ms": 0.522833,
      "max_time_ms": 12.500917,
      "ops_per_second": 919.7759479505719
    },
    {
      "name": "valueSetExpansionAnalysis",
      "description": "Complex analysis of ValueSet expansion hierarchy",
      "expression": "ValueSet.expansion.contains.where(abstract.exists() and abstract = true).contains.where(display.contains('Mass')).count()",
      "iterations": 1000,
      "avg_time_ms": 0.338277428,
      "min_time_ms": 0.164459,
      "max_time_ms": 3.783208,
      "ops_per_second": 2956.153491861124
    },
    {
      "name": "typeConversionOperations",
      "description": "Type checking and conversion operations",
      "expression": "Patient.birthDate.toString().length() + Patient.active.toString().upper().length() + Patient.telecom.rank.where(convertsToInteger()).sum()",
      "iterations": 1000,
      "avg_time_ms": 0.29186533000000037,
      "min_time_ms": 0.158,
      "max_time_ms": 3.777833,
      "ops_per_second": 3426.2377103851245
    },
    {
      "name": "errorHandlingExpressions",
      "description": "Expressions testing error handling and edge cases",
      "expression": "Patient.name.where(use = 'nonexistent').given.first().empty().not() or Patient.telecom.where(system = 'email').value.matches('.*@.*').allTrue()",
      "iterations": 1000,
      "avg_time_ms": 0.30399234899999994,
      "min_time_ms": 0.192833,
      "max_time_ms": 4.463125,
      "ops_per_second": 3289.556474988784
    }
  ],
  "system_info": {
    "platform": "darwin",
    "node_version": "v22.16.0",
    "fhirpath_version": "3.18.0"
  }
}